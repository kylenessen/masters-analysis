---
title: "Wind Effects on Butterfly Abundance - GAMM Analysis"
format: pdf
---

```{r setup}
library(tidyverse)
library(broom)
library(gratia)
library(performance)
library(DHARMa)
library(ggeffects)
library(here)
library(mgcv) # Load mgcv last to avoid conflicts

theme_set(theme_minimal())
```

```{r load-data}
# Load the prepared data
# Assuming df is already loaded with the structure described
# If not, load it here:
df <- read_csv(here("data", "analysis_dataset_final.csv"))

# Check data structure
glimpse(df)

```

```{r fit-models}
# Load the data
df_full <- df

# Prepare data for modeling
# Select variables, ensure correct types, create AR.start, and handle missing values
df_model <- df_full %>%
    select(total_butterflies, temperature, wind_mean, butterflies_direct_sun, day_id, Observer) %>%
    mutate(
        day_id = as.factor(day_id),
        Observer = as.factor(Observer)
    ) %>%
    group_by(day_id) %>%
    mutate(AR_start = row_number() == 1) %>%
    ungroup() %>%
    na.omit()

# Define the models
k_val <- 28
initial_rho <- 0.75 # pulled from earlier model

# Note: After changing AR_start to factor, all models need to be rerun
# to avoid errors with ggpredict()

# Model 1: Null Model
m_null <- gamm(total_butterflies ~ 1, # No fixed effects in the formula
    random = list(day_id = ~1, Observer = ~1),
    data = df_model,
    family = tw(),
    correlation = corAR1(form = ~ 1 | day_id)
)

# Model 2: Single Predictor Models
m_temp <- bam(total_butterflies ~ s(temperature, k = k_val) + s(day_id, bs = "re") + s(Observer, bs = "re"),
    data = df_model,
    family = tw(),
    method = "fREML",
    discrete = TRUE,
    rho = initial_rho,
    AR.start = df_model$AR_start
)

m_wind <- bam(total_butterflies ~ s(wind_mean, k = k_val) + s(day_id, bs = "re") + s(Observer, bs = "re"),
    data = df_model,
    family = tw(),
    method = "fREML",
    discrete = TRUE,
    rho = initial_rho,
    AR.start = df_model$AR_start
)

m_sun <- bam(total_butterflies ~ s(butterflies_direct_sun, k = k_val) + s(day_id, bs = "re") + s(Observer, bs = "re"),
    data = df_model,
    family = tw(),
    method = "fREML",
    discrete = TRUE,
    rho = initial_rho,
    AR.start = df_model$AR_start
)


# Model 3: Additive Model
m_additive <- bam(
    total_butterflies ~ s(temperature, k = k_val) +
        s(wind_mean, k = k_val) +
        s(butterflies_direct_sun, k = k_val) +
        s(day_id, bs = "re") +
        s(Observer, bs = "re"),
    data = df_model,
    family = tw(),
    method = "fREML",
    discrete = TRUE,
    rho = initial_rho,
    AR.start = df_model$AR_start
)

# Model 4: Additive + Interaction Models
m_int_temp_wind <- bam(
    total_butterflies ~ s(temperature, k = k_val) +
        s(wind_mean, k = k_val) +
        s(butterflies_direct_sun, k = k_val) +
        ti(temperature, wind_mean, k = 10) +
        s(day_id, bs = "re") +
        s(Observer, bs = "re"),
    data = df_model,
    family = tw(),
    method = "fREML",
    discrete = TRUE,
    rho = initial_rho,
    AR.start = df_model$AR_start
)

# We can now inspect these models.
```

```{r model-diagnostics, fig.width=8, fig.height=6}
# Model Diagnostics

# 1. Check for concurvity in the more complex models
# Concurvity is the GAM equivalent of multicollinearity.
# High values (close to 1) can be problematic.
concurvity(m_additive, full = FALSE)
concurvity(m_int_temp_wind, full = FALSE)
```

```{r gam-check-additive, fig.width=8, fig.height=6}
# 2. Use gam.check() for standard diagnostics - Additive Model
# This provides k-checks (are basis dimensions adequate?) and residual plots.
gam.check(m_additive)
```

```{r gam-check-interaction, fig.width=8, fig.height=6}
# gam.check() for interaction model
gam.check(m_int_temp_wind)
```

```{r dharma-additive, fig.width=8, fig.height=6}
# 3. Use DHARMa for more advanced residual diagnostics - Additive Model
# This simulates residuals from the fitted model and compares them to the observed residuals.
sim_res_additive <- simulateResiduals(fittedModel = m_additive, n = 250)
plot(sim_res_additive)
```

```{r dharma-interaction, fig.width=8, fig.height=6}
# DHARMa diagnostics for interaction model
sim_res_int <- simulateResiduals(fittedModel = m_int_temp_wind, n = 250)
plot(sim_res_int)
```

```{r acf-plots, fig.width=8, fig.height=8}
# 4. Check for temporal autocorrelation using ACF plots
# This is crucial for time series data to ensure residuals are not autocorrelated

library(gridExtra)
library(grid)

# Create ACF plots using base R but arrange with grid
# ACF for additive model
acf_add <- acf(residuals(m_additive), plot = FALSE, main = "ACF - Additive Model")
pacf_add <- pacf(residuals(m_additive), plot = FALSE, main = "PACF - Additive Model")

# ACF for interaction model
acf_int <- acf(residuals(m_int_temp_wind), plot = FALSE, main = "ACF - Interaction Model")
pacf_int <- pacf(residuals(m_int_temp_wind), plot = FALSE, main = "PACF - Interaction Model")

# Plot ACF results
plot(acf_add, main = "ACF - Additive Model")
plot(pacf_add, main = "PACF - Additive Model")
plot(acf_int, main = "ACF - Interaction Model")
plot(pacf_int, main = "PACF - Interaction Model")
```

```{r model-comparison}
# 5. Compare models using AIC
# Create a list of models
model_list <- list(
    null = m_null,
    temp = m_temp,
    wind = m_wind,
    sun = m_sun,
    additive = m_additive,
    interaction = m_int_temp_wind
)

# Get AIC for each model
aic_values <- sapply(model_list, AIC)

# Create a summary table
aic_table <- tibble(
    model = names(aic_values),
    AIC = aic_values
) %>%
    arrange(AIC)

print(aic_table)
```

