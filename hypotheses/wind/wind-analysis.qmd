---
title: "Wind Effects on Butterfly Abundance - GAMM Analysis"
format: html
---

```{r setup}
library(mgcv)
library(tidyverse)
library(broom)
library(gratia)
library(performance)
library(DHARMa)
library(ggeffects)

theme_set(theme_minimal())
```

```{r load-data}
# Load the prepared data
# Assuming df is already loaded with the structure described
# If not, load it here:
# df <- read_csv("path/to/your/data.csv")

# Check data structure
glimpse(df)

# Check for missing values
summary(df)

# Check correlations among predictors
cor_matrix <- df %>%
  select(temperature, wind_mean, time_above_threshold, butterflies_direct_sun) %>%
  cor(use = "complete.obs")
print(cor_matrix)
```

## Model Specification

We'll fit several GAMM models with increasing complexity:
- Response variable: `total_butterflies` (count data - using negative binomial or poisson)
- Fixed effects: temperature, wind metrics, butterflies in direct sun
- Random effects: day_id, AR_start (AR1 correlation), Observer

```{r model-fitting}
# Set up the data with proper factor levels
df_model <- df %>%
  mutate(
    Observer = as.factor(Observer),
    day_id = as.factor(day_id),
    AR_start = as.logical(AR_start)
  ) %>%
  # Remove any rows with missing values in key variables
  filter(!is.na(total_butterflies),
         !is.na(temperature),
         !is.na(wind_mean),
         !is.na(time_above_threshold))

# 1. NULL MODEL - only random effects
m0_null <- gam(total_butterflies ~ 1 + 
                 s(day_id, bs = "re") + 
                 s(Observer, bs = "re"),
               data = df_model,
               family = nb(),
               method = "REML")

# 2. TEMPERATURE ONLY
m1_temp <- gam(total_butterflies ~ 
                 s(temperature, k = 5) + 
                 s(day_id, bs = "re") + 
                 s(Observer, bs = "re"),
               data = df_model,
               family = nb(),
               method = "REML")

# 3. WIND ONLY (mean wind)
m2_wind <- gam(total_butterflies ~ 
                 s(wind_mean, k = 5) + 
                 s(day_id, bs = "re") + 
                 s(Observer, bs = "re"),
               data = df_model,
               family = nb(),
               method = "REML")

# 4. WIND THRESHOLD ONLY
m3_threshold <- gam(total_butterflies ~ 
                      s(time_above_threshold, k = 5) + 
                      s(day_id, bs = "re") + 
                      s(Observer, bs = "re"),
                    data = df_model,
                    family = nb(),
                    method = "REML")

# 5. BUTTERFLIES IN DIRECT SUN ONLY
m4_sun <- gam(total_butterflies ~ 
                s(butterflies_direct_sun, k = 5) + 
                s(day_id, bs = "re") + 
                s(Observer, bs = "re"),
              data = df_model,
              family = nb(),
              method = "REML")

# 6. ADDITIVE: TEMPERATURE + WIND
m5_temp_wind <- gam(total_butterflies ~ 
                      s(temperature, k = 5) + 
                      s(wind_mean, k = 5) + 
                      s(day_id, bs = "re") + 
                      s(Observer, bs = "re"),
                    data = df_model,
                    family = nb(),
                    method = "REML")

# 7. ADDITIVE: TEMPERATURE + WIND THRESHOLD
m6_temp_threshold <- gam(total_butterflies ~ 
                           s(temperature, k = 5) + 
                           s(time_above_threshold, k = 5) + 
                           s(day_id, bs = "re") + 
                           s(Observer, bs = "re"),
                         data = df_model,
                         family = nb(),
                         method = "REML")

# 8. ADDITIVE: ALL MAIN EFFECTS
m7_additive_all <- gam(total_butterflies ~ 
                         s(temperature, k = 5) + 
                         s(wind_mean, k = 5) + 
                         s(butterflies_direct_sun, k = 5) + 
                         s(day_id, bs = "re") + 
                         s(Observer, bs = "re"),
                       data = df_model,
                       family = nb(),
                       method = "REML")

# 9. INTERACTION: TEMPERATURE × WIND (tensor product)
m8_interact_temp_wind <- gam(total_butterflies ~ 
                               te(temperature, wind_mean, k = c(5, 5)) + 
                               s(day_id, bs = "re") + 
                               s(Observer, bs = "re"),
                             data = df_model,
                             family = nb(),
                             method = "REML")

# 10. INTERACTION: TEMPERATURE × WIND THRESHOLD
m9_interact_temp_threshold <- gam(total_butterflies ~ 
                                    te(temperature, time_above_threshold, k = c(5, 5)) + 
                                    s(day_id, bs = "re") + 
                                    s(Observer, bs = "re"),
                                  data = df_model,
                                  family = nb(),
                                  method = "REML")

# 11. COMPLEX: TEMP × WIND + SUN EFFECT
m10_complex <- gam(total_butterflies ~ 
                     te(temperature, wind_mean, k = c(5, 5)) + 
                     s(butterflies_direct_sun, k = 5) + 
                     s(day_id, bs = "re") + 
                     s(Observer, bs = "re"),
                   data = df_model,
                   family = nb(),
                   method = "REML")

# 12. LINEAR EFFECTS MODEL (for comparison)
m11_linear <- gam(total_butterflies ~ 
                    temperature + 
                    wind_mean + 
                    butterflies_direct_sun +
                    s(day_id, bs = "re") + 
                    s(Observer, bs = "re"),
                  data = df_model,
                  family = nb(),
                  method = "REML")

# Models with AR1 correlation structure for temporal autocorrelation
# Note: This requires ordered data by time within day
df_model_ar <- df_model %>%
  arrange(day_id, timestamp)

# 13. BEST ADDITIVE MODEL WITH AR1
m12_ar1 <- gamm(total_butterflies ~ 
                  s(temperature, k = 5) + 
                  s(wind_mean, k = 5) + 
                  s(butterflies_direct_sun, k = 5),
                random = list(day_id = ~1, Observer = ~1),
                correlation = corAR1(form = ~ 1 | day_id),
                data = df_model_ar,
                family = poisson(),
                method = "REML")
```

## Model Comparison

```{r model-comparison}
# Extract AIC values for all models
model_comparison <- data.frame(
  Model = c("Null", "Temperature only", "Wind only", "Wind threshold only", 
            "Sun only", "Temp + Wind", "Temp + Threshold", 
            "All additive", "Temp × Wind", "Temp × Threshold",
            "Complex (Temp×Wind + Sun)", "Linear effects"),
  AIC = c(AIC(m0_null), AIC(m1_temp), AIC(m2_wind), AIC(m3_threshold),
          AIC(m4_sun), AIC(m5_temp_wind), AIC(m6_temp_threshold),
          AIC(m7_additive_all), AIC(m8_interact_temp_wind), 
          AIC(m9_interact_temp_threshold), AIC(m10_complex), AIC(m11_linear)),
  Deviance_explained = c(
    summary(m0_null)$dev.expl * 100,
    summary(m1_temp)$dev.expl * 100,
    summary(m2_wind)$dev.expl * 100,
    summary(m3_threshold)$dev.expl * 100,
    summary(m4_sun)$dev.expl * 100,
    summary(m5_temp_wind)$dev.expl * 100,
    summary(m6_temp_threshold)$dev.expl * 100,
    summary(m7_additive_all)$dev.expl * 100,
    summary(m8_interact_temp_wind)$dev.expl * 100,
    summary(m9_interact_temp_threshold)$dev.expl * 100,
    summary(m10_complex)$dev.expl * 100,
    summary(m11_linear)$dev.expl * 100
  )
) %>%
  mutate(
    Delta_AIC = AIC - min(AIC),
    Weight = exp(-0.5 * Delta_AIC) / sum(exp(-0.5 * Delta_AIC))
  ) %>%
  arrange(AIC)

print(model_comparison)

# Plot model comparison
ggplot(model_comparison, aes(x = reorder(Model, -AIC), y = Delta_AIC)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_hline(yintercept = 2, linetype = "dashed", color = "red") +
  coord_flip() +
  labs(x = "Model", y = "”AIC", 
       title = "Model Comparison",
       subtitle = "Models within ”AIC < 2 have substantial support") +
  theme_minimal()
```

## Best Model Diagnostics

```{r best-model-diagnostics}
# Identify best model (lowest AIC)
best_model_name <- model_comparison$Model[1]
print(paste("Best model:", best_model_name))

# Get the best model object
best_model <- switch(best_model_name,
  "Null" = m0_null,
  "Temperature only" = m1_temp,
  "Wind only" = m2_wind,
  "Wind threshold only" = m3_threshold,
  "Sun only" = m4_sun,
  "Temp + Wind" = m5_temp_wind,
  "Temp + Threshold" = m6_temp_threshold,
  "All additive" = m7_additive_all,
  "Temp × Wind" = m8_interact_temp_wind,
  "Temp × Threshold" = m9_interact_temp_threshold,
  "Complex (Temp×Wind + Sun)" = m10_complex,
  "Linear effects" = m11_linear
)

# Model summary
summary(best_model)

# Check convergence
gam.check(best_model)

# Diagnostic plots using gratia
draw(best_model, residuals = TRUE)

# Additional diagnostic plots
par(mfrow = c(2, 2))
plot(best_model, all.terms = TRUE, pages = 1)
par(mfrow = c(1, 1))

# DHARMa residual diagnostics for count data
simulationOutput <- simulateResiduals(fittedModel = best_model, n = 1000)
plot(simulationOutput)

# Test for overdispersion
testDispersion(simulationOutput)

# Test for zero-inflation
testZeroInflation(simulationOutput)

# Spatial and temporal autocorrelation tests
testSpatialAutocorrelation(simulationOutput, 
                           x = df_model$timestamp[!is.na(df_model$total_butterflies)],
                           plot = TRUE)
```

## Model Predictions and Effects

```{r model-effects}
# Visualize smooth terms from best model
plot_smooths <- draw(best_model)
print(plot_smooths)

# Get predicted effects for main variables
if("temperature" %in% names(best_model$model)) {
  temp_effects <- ggpredict(best_model, terms = "temperature [all]")
  plot(temp_effects, add.data = TRUE) + 
    labs(title = "Effect of Temperature on Butterfly Abundance")
}

if("wind_mean" %in% names(best_model$model)) {
  wind_effects <- ggpredict(best_model, terms = "wind_mean [all]")
  plot(wind_effects, add.data = TRUE) + 
    labs(title = "Effect of Wind on Butterfly Abundance")
}

# If interaction model, visualize interaction
if(grepl("×", best_model_name)) {
  # Create interaction plot
  if(grepl("Temp × Wind", best_model_name)) {
    interaction_pred <- ggpredict(best_model, 
                                  terms = c("temperature [all]", "wind_mean [1, 2, 3, 4]"))
    plot(interaction_pred) + 
      labs(title = "Temperature × Wind Interaction Effect")
  }
}
```

## Random Effects Assessment

```{r random-effects}
# Extract and visualize random effects
ranef_summary <- summary(best_model)

# Check random effect significance
anova(best_model)

# Variance components
print("Variance Components:")
print(summary(best_model)$s.table)

# Plot random effects if significant
if(length(best_model$smooth) > 0) {
  for(i in 1:length(best_model$smooth)) {
    if(best_model$smooth[[i]]$label %in% c("s(day_id)", "s(Observer)")) {
      plot(best_model, select = i, main = best_model$smooth[[i]]$label)
    }
  }
}
```

## Model Validation

```{r cross-validation}
# K-fold cross-validation for best model
set.seed(123)
n_folds <- 5
cv_results <- numeric(n_folds)

# Create fold indices
fold_indices <- sample(rep(1:n_folds, length.out = nrow(df_model)))

for(i in 1:n_folds) {
  train_data <- df_model[fold_indices != i, ]
  test_data <- df_model[fold_indices == i, ]
  
  # Refit model on training data
  cv_model <- update(best_model, data = train_data)
  
  # Predict on test data
  predictions <- predict(cv_model, newdata = test_data, type = "response")
  
  # Calculate RMSE
  cv_results[i] <- sqrt(mean((test_data$total_butterflies - predictions)^2, na.rm = TRUE))
}

print(paste("Cross-validation RMSE:", mean(cv_results), "±", sd(cv_results)))
```

## Summary and Interpretation

```{r summary}
# Create summary table of key findings
cat("\n=== MODEL SELECTION SUMMARY ===\n")
cat("Best model:", best_model_name, "\n")
cat("AIC:", model_comparison$AIC[1], "\n")
cat("Deviance explained:", round(model_comparison$Deviance_explained[1], 2), "%\n")
cat("\nModels with substantial support (”AIC < 2):\n")
print(model_comparison[model_comparison$Delta_AIC < 2, c("Model", "AIC", "Delta_AIC", "Weight")])

# Effect sizes and significance
cat("\n=== EFFECT SUMMARY ===\n")
print(summary(best_model)$s.table)
print(summary(best_model)$p.table)

# Save results
write_csv(model_comparison, "wind_analysis_model_comparison.csv")
saveRDS(best_model, "best_wind_model.rds")
```