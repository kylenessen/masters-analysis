---
title: "Butterfly Abundance - Bayesian Analysis"
format: pdf
---

```{r setup}
library(tidyverse)
library(brms)
library(posterior)
library(bayesplot)
library(ggeffects)
library(here)
library(future)
library(furrr)

# Set up parallel processing for 24 cores
# Strategy: Run 4 models simultaneously, each using 4 cores (4 chains × 1 core)
# Total: 4 models × 4 cores = 16 cores, leaving 8 for system
plan(multisession, workers = 4)  # 4 parallel R sessions
options(mc.cores = 4)  # Each brm model uses 4 cores for chains

theme_set(theme_minimal())

# Set global MCMC settings
n_iter <- 2000
n_warmup <- 1000
n_chains <- 4
```

```{r load-data}
# Load the prepared data
df <- read_csv(here("data", "analysis_dataset_final.csv"))

# Check data structure
glimpse(df)
```

```{r prepare-data}
# Prepare data for Bayesian modeling
df_model <- df %>%
    select(total_butterflies, temperature, wind_mean, butterflies_direct_sun, 
           day_id, Observer, time_above_threshold) %>%
    mutate(
        day_id = as.factor(day_id),
        Observer = as.factor(Observer)
    ) %>%
    group_by(day_id) %>%
    mutate(
        time_within_day = row_number(),  # For AR(1) structure
        AR_start = row_number() == 1
    ) %>%
    ungroup() %>%
    na.omit()

# Scale continuous predictors for better convergence
df_model <- df_model %>%
    mutate(
        temperature_scaled = scale(temperature)[,1],
        wind_mean_scaled = scale(wind_mean)[,1],
        butterflies_direct_sun_scaled = scale(butterflies_direct_sun)[,1],
        time_above_threshold_scaled = scale(time_above_threshold)[,1]
    )

cat("Dataset dimensions:", nrow(df_model), "×", ncol(df_model), "\n")
cat("Number of days:", length(unique(df_model$day_id)), "\n")
cat("Number of observers:", length(unique(df_model$Observer)), "\n")
```

```{r model-priors}
# Set up priors for different model types
# Null model priors (no fixed effects or smooth terms)
null_priors <- c(
    prior(normal(0, 2.5), class = Intercept),
    prior(exponential(1), class = sd),
    prior(normal(0, 0.5), class = ar)  # AR coefficient prior
)

# Priors for models with smooth terms
smooth_priors <- c(
    prior(normal(0, 2.5), class = Intercept),
    prior(normal(0, 1), class = b),  # For parametric terms if any
    prior(exponential(1), class = sd),
    prior(exponential(1), class = sds),  # For smooth terms
    prior(normal(0, 0.5), class = ar)  # AR coefficient prior
)

# Family for count data with overdispersion
family_spec <- negbinomial()
```

```{r parallel-setup}
# Function to fit models in parallel batches
fit_bayesian_models <- function() {
    
    # Model formulas - Primary hypothesis set (wind_mean)
    formulas_wind <- list(
        null = bf(total_butterflies ~ 1 + 
                 (1 | day_id) + (1 | Observer) + 
                 ar(time = time_within_day, gr = day_id, p = 1)),
        
        temp = bf(total_butterflies ~ s(temperature_scaled, k = 10) + 
                 (1 | day_id) + (1 | Observer) + 
                 ar(time = time_within_day, gr = day_id, p = 1)),
        
        wind = bf(total_butterflies ~ s(wind_mean_scaled, k = 10) + 
                 (1 | day_id) + (1 | Observer) + 
                 ar(time = time_within_day, gr = day_id, p = 1)),
        
        sun = bf(total_butterflies ~ s(butterflies_direct_sun_scaled, k = 10) + 
                (1 | day_id) + (1 | Observer) + 
                ar(time = time_within_day, gr = day_id, p = 1))
    )
    
    # Model formulas - Secondary hypothesis set (time_above_threshold)
    formulas_threshold <- list(
        null_thresh = bf(total_butterflies ~ 1 + 
                        (1 | day_id) + (1 | Observer) + 
                        ar(time = time_within_day, gr = day_id, p = 1)),
        
        temp_thresh = bf(total_butterflies ~ s(temperature_scaled, k = 10) + 
                        (1 | day_id) + (1 | Observer) + 
                        ar(time = time_within_day, gr = day_id, p = 1)),
        
        threshold = bf(total_butterflies ~ s(time_above_threshold_scaled, k = 10) + 
                      (1 | day_id) + (1 | Observer) + 
                      ar(time = time_within_day, gr = day_id, p = 1)),
        
        sun_thresh = bf(total_butterflies ~ s(butterflies_direct_sun_scaled, k = 10) + 
                       (1 | day_id) + (1 | Observer) + 
                       ar(time = time_within_day, gr = day_id, p = 1))
    )
    
    return(list(wind = formulas_wind, threshold = formulas_threshold))
}

# Get all formulas
all_formulas <- fit_bayesian_models()

# Monitor parallel execution
cat("Parallel backend configured:\n")
cat("- Workers (parallel R sessions):", nbrOfWorkers(), "\n")
cat("- Cores per model (for chains):", getOption("mc.cores"), "\n")
cat("- Total cores in use:", nbrOfWorkers() * getOption("mc.cores"), "\n\n")
```

```{r fit-wind-models, eval=TRUE}
# Fit wind hypothesis models (4 models in parallel)
cat("Fitting wind hypothesis models in parallel...\n")
cat("Using 4 parallel sessions, each with 4 chains (16 cores total)\n")

# Define model specifications
wind_model_specs <- list(
    null = list(
        formula = all_formulas$wind$null,
        prior = null_priors,
        file = "models/m_null_wind"
    ),
    temp = list(
        formula = all_formulas$wind$temp,
        prior = smooth_priors,
        file = "models/m_temp_wind"
    ),
    wind = list(
        formula = all_formulas$wind$wind,
        prior = smooth_priors,
        file = "models/m_wind"
    ),
    sun = list(
        formula = all_formulas$wind$sun,
        prior = smooth_priors,
        file = "models/m_sun_wind"
    )
)

# Function to fit a single model
fit_single_model <- function(spec) {
    brm(
        formula = spec$formula,
        data = df_model,
        family = family_spec,
        prior = spec$prior,
        chains = n_chains,
        iter = n_iter,
        warmup = n_warmup,
        cores = 4,  # Each model uses 4 cores
        control = list(adapt_delta = 0.95, max_treedepth = 12),
        file = spec$file,
        silent = 0  # Show progress
    )
}

# Fit all wind models in parallel
start_wind <- Sys.time()
wind_models_list <- future_map(
    wind_model_specs,
    fit_single_model,
    .options = furrr_options(seed = 123)
)
end_wind <- Sys.time()

# Extract models
m_null_wind <- wind_models_list$null
m_temp_wind <- wind_models_list$temp
m_wind <- wind_models_list$wind
m_sun_wind <- wind_models_list$sun

cat("Wind hypothesis models completed in", 
    round(difftime(end_wind, start_wind, units = "mins"), 2), "minutes\n")
```


```{r fit-threshold-models, eval=TRUE}
# Fit time_above_threshold hypothesis models (4 models in parallel)
cat("Fitting time above threshold hypothesis models in parallel...\n")
cat("Using 4 parallel sessions, each with 4 chains (16 cores total)\n")

# Define threshold model specifications
threshold_model_specs <- list(
    null = list(
        formula = all_formulas$threshold$null_thresh,
        prior = null_priors,
        file = "models/m_null_thresh"
    ),
    temp = list(
        formula = all_formulas$threshold$temp_thresh,
        prior = smooth_priors,
        file = "models/m_temp_thresh"
    ),
    threshold = list(
        formula = all_formulas$threshold$threshold,
        prior = smooth_priors,
        file = "models/m_threshold"
    ),
    sun = list(
        formula = all_formulas$threshold$sun_thresh,
        prior = smooth_priors,
        file = "models/m_sun_thresh"
    )
)

# Fit all threshold models in parallel
start_thresh <- Sys.time()
threshold_models_list <- future_map(
    threshold_model_specs,
    fit_single_model,  # Using the same function defined above
    .options = furrr_options(seed = 456)
)
end_thresh <- Sys.time()

# Extract models
m_null_thresh <- threshold_models_list$null
m_temp_thresh <- threshold_models_list$temp
m_threshold <- threshold_models_list$threshold
m_sun_thresh <- threshold_models_list$sun

cat("Threshold hypothesis models completed in",
    round(difftime(end_thresh, start_thresh, units = "mins"), 2), "minutes\n")
cat("Total modeling time:",
    round(difftime(end_thresh, start_wind, units = "mins"), 2), "minutes\n")
```

```{r model-diagnostics}
# Model diagnostics for key models
wind_models <- list(
    null = m_null_wind,
    temp = m_temp_wind, 
    wind = m_wind,
    sun = m_sun_wind
)

threshold_models <- list(
    null = m_null_thresh,
    temp = m_temp_thresh,
    threshold = m_threshold,
    sun = m_sun_thresh
)

# Check convergence (Rhat should be < 1.01)
cat("=== WIND MODELS CONVERGENCE ===\n")
for(name in names(wind_models)) {
    rhat_vals <- rhat(wind_models[[name]])
    max_rhat <- max(rhat_vals, na.rm = TRUE)
    cat(sprintf("%s: Max Rhat = %.3f\n", name, max_rhat))
}

cat("\n=== THRESHOLD MODELS CONVERGENCE ===\n")
for(name in names(threshold_models)) {
    rhat_vals <- rhat(threshold_models[[name]])
    max_rhat <- max(rhat_vals, na.rm = TRUE)
    cat(sprintf("%s: Max Rhat = %.3f\n", name, max_rhat))
}
```

```{r trace-plots, fig.width=10, fig.height=6}
# Trace plots for key parameters
plot(m_wind, pars = c("b_Intercept", "sd_day_id__Intercept"))
plot(m_threshold, pars = c("b_Intercept", "sd_day_id__Intercept"))
```

```{r model-comparison-wind}
# Model comparison for wind hypothesis using LOO-CV
wind_loo <- list(
    null = loo(m_null_wind),
    temp = loo(m_temp_wind),
    wind = loo(m_wind),
    sun = loo(m_sun_wind)
)

# Compare wind models
wind_comparison <- loo_compare(wind_loo)
print("=== WIND HYPOTHESIS MODEL COMPARISON ===")
print(wind_comparison)

# Model weights
wind_weights <- model_weights(wind_loo)
print("\nModel weights (wind hypothesis):")
print(round(wind_weights, 3))
```

```{r model-comparison-threshold}
# Model comparison for threshold hypothesis using LOO-CV
threshold_loo <- list(
    null = loo(m_null_thresh),
    temp = loo(m_temp_thresh),
    threshold = loo(m_threshold),
    sun = loo(m_sun_thresh)
)

# Compare threshold models
threshold_comparison <- loo_compare(threshold_loo)
print("=== THRESHOLD HYPOTHESIS MODEL COMPARISON ===")
print(threshold_comparison)

# Model weights
threshold_weights <- model_weights(threshold_loo)
print("\nModel weights (threshold hypothesis):")
print(round(threshold_weights, 3))
```

```{r posterior-predictive-checks, fig.width=10, fig.height=6}
# Posterior predictive checks
pp_check(m_wind, ndraws = 100) + 
    ggtitle("Posterior Predictive Check: Wind Model")

pp_check(m_threshold, ndraws = 100) + 
    ggtitle("Posterior Predictive Check: Threshold Model")
```

```{r effects-plots, fig.width=10, fig.height=8}
# Conditional effects plots
plot(conditional_effects(m_wind), ask = FALSE)
plot(conditional_effects(m_threshold), ask = FALSE)
```

```{r summary-stats}
# Model summaries
cat("=== WIND MODEL SUMMARY ===\n")
summary(m_wind)

cat("\n=== THRESHOLD MODEL SUMMARY ===\n")
summary(m_threshold)
```

```{r save-results}
# Save key results
save(
    wind_models, threshold_models,
    wind_comparison, threshold_comparison,
    wind_weights, threshold_weights,
    file = "models/bayesian_analysis_results.RData"
)

cat("Analysis complete. Results saved to models/bayesian_analysis_results.RData\n")
```