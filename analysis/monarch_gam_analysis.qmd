---
title: "Analysis of distruptive winds to overwintering monarch butterflies"
author: "Kyle Nessen"
date: "`r Sys.Date()`"
format:
    #html:
        #embed-resources: true
        #toc: true
        #toc-depth: 3
        #code-fold: true
        #theme: cosmo
    pdf:
        toc: true
        toc-depth: 3
        documentclass: article
execute:
    warning: false
    message: false
---

## Introduction

This analysis investigates the first hypothesis of my master's thesis: that wind acts as a disruptive force to overwintering monarch butterflies. If true, we predict that monarch abundance at roosts will decrease when exposed to disruptive winds. I use labeled photos from my 2023-2024 dataset to test this hypothesis. I employed GAM (Generalized Additive Models) because they allow for non-linear relationships in fixed effects while maintaining the necessary random effect structure to account for temporal autocorrelation and nested sampling design.

## Setup

Load libraries and data:

```{r setup}
library(tidyverse)
library(mgcv)
library(lubridate)
library(plotly)
library(knitr)
library(DT)
library(here)
# Load the monarch analysis data
monarch_data <- read_csv(here("data", "monarch_analysis_lag30min.csv"))
```

## Exploratory Data Analysis

The response variable is the difference in monarch counts between time t and t-1 at 30-minute intervals. I applied a cube root transformation to achieve a more normal distribution. Because the lagged comparisons create overlapping pairs of observations, I include an AR1 autocorrelation structure to account for temporal dependence.

```{r temporal-dependency-diagram}
#| fig-cap: "Illustration of temporal dependency in observation pairs. Points represent photos with labeled count data at 30-minute intervals. Blue boxes show non-overlapping pairs of observations. The red box shows an overlapping comparison where one observation is shared between adjacent pairs, creating temporal autocorrelation that is controlled by the AR1 structure."
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/clipboard-1435734413.png")
```

```{r data-comparison}
library(gridExtra)

# Compare total butterfly counts with and without SC8
p_all <- ggplot(monarch_data, aes(x = total_butterflies_t_lag)) +
    geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
    labs(
        title = "Total Butterflies - All Data",
        x = "Total Butterflies (t-lag)", y = "Frequency"
    ) +
    theme_minimal()

p_no_sc8 <- ggplot(monarch_data %>% filter(deployment_id != "SC8"), aes(x = total_butterflies_t_lag)) +
    geom_histogram(bins = 30, fill = "orange", alpha = 0.7) +
    labs(
        title = "Total Butterflies - SC8 Excluded",
        x = "Total Butterflies (t-lag)", y = "Frequency"
    ) +
    theme_minimal()

grid.arrange(p_all, p_no_sc8, ncol = 2)
```

```{r exploratory-plots}
library(corrplot)
library(gridExtra)

# Select variables used in the models
model_vars <- monarch_data %>%
    select(
        butterfly_difference_cbrt, total_butterflies_t_lag, max_gust,
        temperature_avg, butterflies_direct_sun_t_lag, time_within_day_t
    )

# Histograms of key variables
p1 <- ggplot(monarch_data, aes(x = butterfly_difference_cbrt)) +
    geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
    labs(
        title = "Response: Butterfly Difference (Cube Root)",
        x = "Butterfly Difference (cbrt)", y = "Frequency"
    )

p2 <- ggplot(monarch_data, aes(x = total_butterflies_t_lag)) +
    geom_histogram(bins = 30, fill = "orange", alpha = 0.7) +
    labs(
        title = "Previous Butterfly Count",
        x = "Total Butterflies (t-lag)", y = "Frequency"
    )

p3 <- ggplot(monarch_data, aes(x = temperature_avg)) +
    geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
    labs(
        title = "Temperature Distribution",
        x = "Average Temperature (°C)", y = "Frequency"
    )

p4 <- ggplot(monarch_data, aes(x = max_gust)) +
    geom_histogram(bins = 30, fill = "lightblue", alpha = 0.7) +
    labs(
        title = "Wind Gust Distribution",
        x = "Max Gust (m/s)", y = "Frequency"
    )

grid.arrange(p1, p2, p3, p4, ncol = 2)
```

```{r correlation-analysis}
# Correlation matrix for model variables
cor_matrix <- cor(model_vars, use = "complete.obs")

# Create correlation plot
corrplot(cor_matrix,
    method = "color",
    type = "upper",
    order = "hclust",
    tl.cex = 0.8,
    tl.col = "black",
    tl.srt = 45,
    addCoef.col = "black",
    number.cex = 0.7,
    title = "Correlation Matrix: Model Variables"
)

# Print correlation table
kable(round(cor_matrix, 3),
    caption = "Correlation Matrix for Model Variables"
)
```

```{r diurnal-patterns}
# Butterfly activity by time of day
p1 <- ggplot(monarch_data, aes(x = time_within_day_t, y = total_butterflies_t_lag)) +
    geom_point(alpha = 0.3) +
    geom_smooth(method = "loess", se = TRUE, color = "blue") +
    labs(
        title = "Butterfly Abundance Throughout the Day",
        x = "Time Within Day (minutes)", y = "Total Butterflies"
    ) +
    theme_minimal()

# Sun exposure patterns by time
p2 <- ggplot(monarch_data, aes(x = time_within_day_t, y = butterflies_direct_sun_t_lag)) +
    geom_point(alpha = 0.3, color = "orange") +
    geom_smooth(method = "loess", se = TRUE, color = "darkorange") +
    labs(
        title = "Sun Exposure Throughout the Day",
        x = "Time Within Day (minutes)", y = "Butterflies in Direct Sun"
    ) +
    theme_minimal()

# Temperature patterns by time
p3 <- ggplot(monarch_data, aes(x = time_within_day_t, y = temperature_avg)) +
    geom_point(alpha = 0.3, color = "red") +
    geom_smooth(method = "loess", se = TRUE, color = "darkred") +
    labs(
        title = "Temperature Throughout the Day",
        x = "Time Within Day (minutes)", y = "Average Temperature (°C)"
    ) +
    theme_minimal()

# Response variable by time
p4 <- ggplot(monarch_data, aes(x = time_within_day_t, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "purple") +
    geom_smooth(method = "loess", se = TRUE, color = "darkviolet") +
    labs(
        title = "Butterfly Change Throughout the Day",
        x = "Time Within Day (minutes)", y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

grid.arrange(p1, p2, p3, p4, ncol = 2)
```

## Individual Predictor GAM Plots

Exploring the relationship between each model predictor and butterfly_difference_cbrt with GAM smoothed lines to understand the shape of relationships before modeling.

```{r individual-predictor-gams}
#| fig-width: 10
#| fig-height: 6
library(mgcv)

# Max Gust vs Butterfly Difference
p1 <- ggplot(monarch_data, aes(x = max_gust, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "steelblue") +
    geom_smooth(method = "gam", se = TRUE, color = "darkblue") +
    labs(
        title = "Max Gust vs Butterfly Change",
        x = "Max Gust (m/s)", 
        y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

# Temperature vs Butterfly Difference  
p2 <- ggplot(monarch_data, aes(x = temperature_avg, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "red") +
    geom_smooth(method = "gam", se = TRUE, color = "darkred") +
    labs(
        title = "Temperature vs Butterfly Change",
        x = "Average Temperature (°C)", 
        y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

# Butterflies in Direct Sun vs Butterfly Difference
p3 <- ggplot(monarch_data, aes(x = butterflies_direct_sun_t_lag, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "orange") +
    geom_smooth(method = "gam", se = TRUE, color = "darkorange") +
    labs(
        title = "Direct Sun Exposure vs Butterfly Change",
        x = "Butterflies in Direct Sun (t-lag)", 
        y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

# Time of Day vs Butterfly Difference
p4 <- ggplot(monarch_data, aes(x = time_within_day_t, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "purple") +
    geom_smooth(method = "gam", se = TRUE, color = "darkviolet") +
    labs(
        title = "Time of Day vs Butterfly Change",
        x = "Time Within Day (minutes)", 
        y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

# Total Butterflies (previous) vs Butterfly Difference  
p5 <- ggplot(monarch_data, aes(x = total_butterflies_t_lag, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3, color = "darkgreen") +
    geom_smooth(method = "gam", se = TRUE, color = "forestgreen") +
    labs(
        title = "Previous Butterfly Count vs Change",
        x = "Total Butterflies (t-lag)", 
        y = "Butterfly Difference (cbrt)"
    ) +
    theme_minimal()

# Display plots in grid
p1
p2
p3
p4
p5
```

```{r data-prep}
#| include: false
# Check grove distribution
table(monarch_data$grove)

# Remove any rows with missing values in key variables and exclude SC_8
model_data <- monarch_data %>%
    filter(
        !is.na(butterfly_difference_cbrt),
        !is.na(total_butterflies_t_lag),
        !is.na(max_gust),
        !is.na(temperature_avg),
        !is.na(butterflies_direct_sun_t_lag),
        !is.na(deployment_id),
        !is.na(deployment_day),
        !is.na(Observer),
        !is.na(observation_order_within_day_t)
    )

cat("Clean dataset has", nrow(model_data), "observations\n")
```

## Modeling Strategy

Our modeling approach used a comprehensive AIC-based comparison to evaluate all possible combinations of three key environmental predictors: wind speed (max_gust), temperature (temperature_avg), and solar exposure (butterflies_direct_sun_t_lag). We tested two fundamental modeling frameworks: models that include total_butterflies_t_lag as a control variable (testing effects on relative/proportional change) and models that exclude it (testing effects on absolute change). Within each framework, we systematically evaluated linear main effects, two-way and three-way interactions, and non-linear relationships using smooth terms. We also incorporated time-of-day effects to capture diurnal patterns. This resulted in 47 candidate models that comprehensively explore the parameter space while maintaining proper mixed-effects structure with random effects for deployment, observer, and day, plus AR1 correlation for within-day autocorrelation.

## Model Building and Selection

Please expand the code block to see the full list of models tested.

```{r model-setup}
library(nlme)

# Define the random effects structure and correlation
random_structure <- list(deployment_id = ~1, Observer = ~1, deployment_day = ~1)
correlation_structure <- corAR1(form = ~ observation_order_within_day_t | deployment_day)

# Model specifications for AIC comparison
model_specs <- list(
    # Null model
    "M0_null" = "butterfly_difference_cbrt ~ total_butterflies_t_lag",

    # Single variable models
    "M1_gust" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust",
    "M2_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg",
    "M3_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + butterflies_direct_sun_t_lag",

    # Two-variable combinations
    "M4_gust_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust + temperature_avg",
    "M5_gust_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust + butterflies_direct_sun_t_lag",
    "M6_temp_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg + butterflies_direct_sun_t_lag",

    # Three-variable model (main effects only)
    "M7_all_main" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust + temperature_avg + butterflies_direct_sun_t_lag",

    # Two-way interactions
    "M8_gust_temp_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * temperature_avg",
    "M9_gust_sun_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * butterflies_direct_sun_t_lag",
    "M10_temp_sun_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg * butterflies_direct_sun_t_lag",

    # Two-way interactions with third variable as main effect
    "M11_gust_temp_int_plus_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * temperature_avg + butterflies_direct_sun_t_lag",
    "M12_gust_sun_int_plus_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * butterflies_direct_sun_t_lag + temperature_avg",
    "M13_temp_sun_int_plus_gust" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg * butterflies_direct_sun_t_lag + max_gust",

    # All two-way interactions
    "M14_all_two_way" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * temperature_avg + max_gust * butterflies_direct_sun_t_lag + temperature_avg * butterflies_direct_sun_t_lag",

    # Three-way interaction
    "M15_three_way" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + max_gust * temperature_avg * butterflies_direct_sun_t_lag",

    # Smooth terms models (with lag term)
    "M16_smooth_temp" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M17_smooth_sun" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "M18_smooth_gust" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(max_gust) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "M19_smooth_temp_sun" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M20_smooth_all_main" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(max_gust) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M21_time_of_day" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + temperature_avg + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "M22_temp_time" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "M23_all_smooth_time" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(max_gust) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",

    # Models WITHOUT lag term - testing environmental effects on absolute change
    "M24_no_lag_null" = "butterfly_difference_cbrt ~ 1",
    "M25_no_lag_gust" = "butterfly_difference_cbrt ~ max_gust",
    "M26_no_lag_temp" = "butterfly_difference_cbrt ~ temperature_avg",
    "M27_no_lag_sun" = "butterfly_difference_cbrt ~ butterflies_direct_sun_t_lag",
    "M28_no_lag_gust_temp" = "butterfly_difference_cbrt ~ max_gust + temperature_avg",
    "M29_no_lag_gust_sun" = "butterfly_difference_cbrt ~ max_gust + butterflies_direct_sun_t_lag",
    "M30_no_lag_temp_sun" = "butterfly_difference_cbrt ~ temperature_avg + butterflies_direct_sun_t_lag",
    "M31_no_lag_all_main" = "butterfly_difference_cbrt ~ max_gust + temperature_avg + butterflies_direct_sun_t_lag",
    "M32_no_lag_gust_temp_int" = "butterfly_difference_cbrt ~ max_gust * temperature_avg",
    "M33_no_lag_gust_sun_int" = "butterfly_difference_cbrt ~ max_gust * butterflies_direct_sun_t_lag",
    "M34_no_lag_temp_sun_int" = "butterfly_difference_cbrt ~ temperature_avg * butterflies_direct_sun_t_lag",
    "M35_no_lag_gust_temp_int_plus_sun" = "butterfly_difference_cbrt ~ max_gust * temperature_avg + butterflies_direct_sun_t_lag",
    "M36_no_lag_gust_sun_int_plus_temp" = "butterfly_difference_cbrt ~ max_gust * butterflies_direct_sun_t_lag + temperature_avg",
    "M37_no_lag_temp_sun_int_plus_gust" = "butterfly_difference_cbrt ~ temperature_avg * butterflies_direct_sun_t_lag + max_gust",
    "M38_no_lag_all_two_way" = "butterfly_difference_cbrt ~ max_gust * temperature_avg + max_gust * butterflies_direct_sun_t_lag + temperature_avg * butterflies_direct_sun_t_lag",
    "M39_no_lag_three_way" = "butterfly_difference_cbrt ~ max_gust * temperature_avg * butterflies_direct_sun_t_lag",

    # Smooth terms models WITHOUT lag term
    "M40_no_lag_smooth_temp" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M41_no_lag_smooth_sun" = "butterfly_difference_cbrt ~ temperature_avg + s(butterflies_direct_sun_t_lag)",
    "M42_no_lag_smooth_gust" = "butterfly_difference_cbrt ~ s(max_gust) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "M43_no_lag_smooth_temp_sun" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M44_no_lag_smooth_all_main" = "butterfly_difference_cbrt ~ s(max_gust) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "M45_no_lag_time_of_day" = "butterfly_difference_cbrt ~ temperature_avg + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "M46_no_lag_temp_time" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "M47_no_lag_all_smooth_time" = "butterfly_difference_cbrt ~ s(max_gust) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)"
)

cat("Total models to fit:", length(model_specs), "\n")
```

## Model Fitting

```{r model-fitting}
#| cache: true
# Function to safely fit models
fit_model_safely <- function(formula_str, data) {
    tryCatch(
        {
            formula_obj <- as.formula(formula_str)
            gamm(formula_obj,
                data = data,
                random = random_structure,
                correlation = correlation_structure,
                method = "REML"
            )
        },
        error = function(e) {
            message("Failed to fit model: ", formula_str)
            message("Error: ", e$message)
            return(NULL)
        }
    )
}

# Fit all models
cat("Fitting models...\n")
fitted_models <- map(model_specs, ~ fit_model_safely(.x, model_data))

# Remove failed models
successful_models <- fitted_models[!map_lgl(fitted_models, is.null)]
cat("Successfully fitted", length(successful_models), "out of", length(model_specs), "models\n")
```

## Model Comparison

```{r model-comparison}
# Extract AIC values
aic_results <- map_dfr(names(successful_models), function(model_name) {
    model <- successful_models[[model_name]]
    data.frame(
        Model = model_name,
        Formula = model_specs[[model_name]],
        AIC = AIC(model$lme),
        LogLik = logLik(model$lme)[1],
        df = attr(logLik(model$lme), "df")
    )
}) %>%
    arrange(AIC) %>%
    mutate(
        Delta_AIC = AIC - min(AIC),
        AIC_weight = exp(-0.5 * Delta_AIC) / sum(exp(-0.5 * Delta_AIC))
    )

# Display results
aic_results %>%
    select(Model, AIC, Delta_AIC, AIC_weight, df) %>%
    kable(digits = 3, caption = "Model comparison by AIC")

# Show top 5 models
cat("\nTop 5 models by AIC:\n")
head(aic_results, 5) %>%
    select(Model, Formula, AIC, Delta_AIC) %>%
    kable(digits = 3)
```

## Best Model Analysis

```{r best-model-analysis}
# Get the best model
best_model_name <- aic_results$Model[1]
best_model <- successful_models[[best_model_name]]

cat("Best model:", best_model_name, "\n")
cat("Formula:", aic_results$Formula[1], "\n\n")

# Model summary
summary(best_model$gam)
```

## Effect Plots

### Effect of Previous Butterfly Count

```{r effect-previous-count}
#| fig-width: 10
#| fig-height: 6
plot(best_model$gam,
    select = 1, main = "Effect of Previous Butterfly Count",
    xlab = "Total Butterflies (t-lag)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

### Effect of Temperature

```{r effect-temperature}
#| fig-width: 10
#| fig-height: 6
plot(best_model$gam,
    select = 2, main = "Effect of Temperature",
    xlab = "Average Temperature (°C)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

### Diurnal Pattern

```{r effect-diurnal}
#| fig-width: 10
#| fig-height: 6
plot(best_model$gam,
    select = 3, main = "Diurnal Pattern",
    xlab = "Time Within Day (minutes)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

### Effect of Sun Exposure (Smooth)

```{r effect-sun-exposure}
#| fig-width: 10
#| fig-height: 6
# Smooth effect of sun exposure
plot(best_model$gam,
    select = 4, main = "Effect of Sun Exposure (Smooth)",
    xlab = "Butterflies in Direct Sun (t-lag)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

### Smooth Effects (ggplot2 style)

#### Previous Butterfly Count Effect

```{r gratia-previous-count}
#| fig-width: 10
#| fig-height: 6
library(gratia)
draw(best_model$gam, select = "s(total_butterflies_t_lag)") +
    theme_minimal() +
    labs(title = "Effect of Previous Butterfly Count (ggplot2 style)")
```

#### Temperature Effect

```{r gratia-temperature}
#| fig-width: 10
#| fig-height: 6
draw(best_model$gam, select = "s(temperature_avg)") +
    theme_minimal() +
    labs(title = "Effect of Temperature (ggplot2 style)")
```

#### Sun Exposure Effect

```{r gratia-sun-exposure}
#| fig-width: 10
#| fig-height: 6
draw(best_model$gam, select = "s(butterflies_direct_sun_t_lag)") +
    theme_minimal() +
    labs(title = "Effect of Sun Exposure (ggplot2 style)")
```

#### Diurnal Pattern

```{r gratia-diurnal}
#| fig-width: 10
#| fig-height: 6
draw(best_model$gam, select = "s(time_within_day_t)") +
    theme_minimal() +
    labs(title = "Diurnal Pattern (ggplot2 style)")
```

## Model Diagnostics

### Residuals vs Fitted Values

```{r diagnostics-residuals-fitted}
#| fig-width: 10
#| fig-height: 6
plot(best_model$lme, main = "Residuals vs Fitted Values")
```

### Q-Q Plot of Residuals

```{r diagnostics-qq-plot}
#| fig-width: 10
#| fig-height: 6
residuals_df <- data.frame(
    fitted = fitted(best_model$lme),
    residuals = residuals(best_model$lme, type = "normalized")
)

qqnorm(residuals_df$residuals, main = "Normal Q-Q Plot of Residuals")
qqline(residuals_df$residuals)
```

### Distribution of Residuals

```{r diagnostics-histogram}
#| fig-width: 10
#| fig-height: 6
hist(residuals_df$residuals, main = "Distribution of Residuals", xlab = "Residuals", breaks = 30)
```

## Second Best Model Analysis (Wind)

```{r second-best-model-analysis}
# Get the second best model
second_best_model_name <- aic_results$Model[2]
second_best_model <- successful_models[[second_best_model_name]]

cat("Second best model:", second_best_model_name, "\n")
cat("Formula:", aic_results$Formula[2], "\n\n")

# Model summary
summary(second_best_model$gam)
```

### Effect Plots - Second Best Model

#### Effect of Previous Butterfly Count

```{r second-effect-previous-count}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$gam,
    select = 1, main = "Effect of Previous Butterfly Count (Second Best Model)",
    xlab = "Total Butterflies (t-lag)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

#### Effect of Wind Gust

```{r second-effect-wind}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$gam,
    select = 2, main = "Effect of Wind Gust (Second Best Model)",
    xlab = "Max Gust (m/s)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

#### Effect of Temperature

```{r second-effect-temperature}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$gam,
    select = 3, main = "Effect of Temperature (Second Best Model)",
    xlab = "Average Temperature (°C)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

#### Effect of Sun Exposure

```{r second-effect-sun}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$gam,
    select = 4, main = "Effect of Sun Exposure (Second Best Model)",
    xlab = "Butterflies in Direct Sun (t-lag)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

#### Diurnal Pattern

```{r second-effect-diurnal}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$gam,
    select = 5, main = "Diurnal Pattern (Second Best Model)",
    xlab = "Time Within Day (minutes)", ylab = "Partial Effect",
    residuals = TRUE, pch = 19, cex = 0.5
)
```

### Model Diagnostics - Second Best Model

#### Residuals vs Fitted Values

```{r second-diagnostics-residuals-fitted}
#| fig-width: 10
#| fig-height: 6
plot(second_best_model$lme, main = "Residuals vs Fitted Values (Second Best Model)")
```

#### Q-Q Plot of Residuals

```{r second-diagnostics-qq-plot}
#| fig-width: 10
#| fig-height: 6
second_residuals_df <- data.frame(
    fitted = fitted(second_best_model$lme),
    residuals = residuals(second_best_model$lme, type = "normalized")
)

qqnorm(second_residuals_df$residuals, main = "Normal Q-Q Plot of Residuals (Second Best Model)")
qqline(second_residuals_df$residuals)
```

#### Distribution of Residuals

```{r second-diagnostics-histogram}
#| fig-width: 10
#| fig-height: 6
hist(second_residuals_df$residuals,
    main = "Distribution of Residuals (Second Best Model)",
    xlab = "Residuals", breaks = 30
)
```


# Threshold-Based Wind Models

Now we'll explore an alternative approach using `minutes_above_threshold` instead of `max_gust` to represent sustained high wind periods rather than instantaneous peak wind speeds.

## Threshold Model Specifications

```{r threshold-model-setup}
# Model specifications for threshold-based analysis
threshold_model_specs <- list(
    # Null model (same as before)
    "T0_null" = "butterfly_difference_cbrt ~ total_butterflies_t_lag",

    # Single variable models
    "T1_threshold" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold",
    "T2_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg",
    "T3_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + butterflies_direct_sun_t_lag",

    # Two-variable combinations
    "T4_threshold_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold + temperature_avg",
    "T5_threshold_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold + butterflies_direct_sun_t_lag",
    "T6_temp_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg + butterflies_direct_sun_t_lag",

    # Three-variable model (main effects only)
    "T7_all_main" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold + temperature_avg + butterflies_direct_sun_t_lag",

    # Two-way interactions
    "T8_threshold_temp_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * temperature_avg",
    "T9_threshold_sun_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * butterflies_direct_sun_t_lag",
    "T10_temp_sun_int" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg * butterflies_direct_sun_t_lag",

    # Two-way interactions with third variable as main effect
    "T11_threshold_temp_int_plus_sun" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * temperature_avg + butterflies_direct_sun_t_lag",
    "T12_threshold_sun_int_plus_temp" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * butterflies_direct_sun_t_lag + temperature_avg",
    "T13_temp_sun_int_plus_threshold" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + temperature_avg * butterflies_direct_sun_t_lag + minutes_above_threshold",

    # All two-way interactions
    "T14_all_two_way" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * temperature_avg + minutes_above_threshold * butterflies_direct_sun_t_lag + temperature_avg * butterflies_direct_sun_t_lag",

    # Three-way interaction
    "T15_three_way" = "butterfly_difference_cbrt ~ total_butterflies_t_lag + minutes_above_threshold * temperature_avg * butterflies_direct_sun_t_lag",

    # Smooth terms models (with lag term)
    "T16_smooth_temp" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T17_smooth_sun" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "T18_smooth_threshold" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(minutes_above_threshold) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "T19_smooth_temp_sun" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T20_smooth_all_main" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(minutes_above_threshold) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T21_time_of_day" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + temperature_avg + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "T22_temp_time" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "T23_all_smooth_time" = "butterfly_difference_cbrt ~ s(total_butterflies_t_lag) + s(minutes_above_threshold) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",

    # Models WITHOUT lag term - testing environmental effects on absolute change
    "T24_no_lag_null" = "butterfly_difference_cbrt ~ 1",
    "T25_no_lag_threshold" = "butterfly_difference_cbrt ~ minutes_above_threshold",
    "T26_no_lag_temp" = "butterfly_difference_cbrt ~ temperature_avg",
    "T27_no_lag_sun" = "butterfly_difference_cbrt ~ butterflies_direct_sun_t_lag",
    "T28_no_lag_threshold_temp" = "butterfly_difference_cbrt ~ minutes_above_threshold + temperature_avg",
    "T29_no_lag_threshold_sun" = "butterfly_difference_cbrt ~ minutes_above_threshold + butterflies_direct_sun_t_lag",
    "T30_no_lag_temp_sun" = "butterfly_difference_cbrt ~ temperature_avg + butterflies_direct_sun_t_lag",
    "T31_no_lag_all_main" = "butterfly_difference_cbrt ~ minutes_above_threshold + temperature_avg + butterflies_direct_sun_t_lag",
    "T32_no_lag_threshold_temp_int" = "butterfly_difference_cbrt ~ minutes_above_threshold * temperature_avg",
    "T33_no_lag_threshold_sun_int" = "butterfly_difference_cbrt ~ minutes_above_threshold * butterflies_direct_sun_t_lag",
    "T34_no_lag_temp_sun_int" = "butterfly_difference_cbrt ~ temperature_avg * butterflies_direct_sun_t_lag",
    "T35_no_lag_threshold_temp_int_plus_sun" = "butterfly_difference_cbrt ~ minutes_above_threshold * temperature_avg + butterflies_direct_sun_t_lag",
    "T36_no_lag_threshold_sun_int_plus_temp" = "butterfly_difference_cbrt ~ minutes_above_threshold * butterflies_direct_sun_t_lag + temperature_avg",
    "T37_no_lag_temp_sun_int_plus_threshold" = "butterfly_difference_cbrt ~ temperature_avg * butterflies_direct_sun_t_lag + minutes_above_threshold",
    "T38_no_lag_all_two_way" = "butterfly_difference_cbrt ~ minutes_above_threshold * temperature_avg + minutes_above_threshold * butterflies_direct_sun_t_lag + temperature_avg * butterflies_direct_sun_t_lag",
    "T39_no_lag_three_way" = "butterfly_difference_cbrt ~ minutes_above_threshold * temperature_avg * butterflies_direct_sun_t_lag",

    # Smooth terms models WITHOUT lag term
    "T40_no_lag_smooth_temp" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T41_no_lag_smooth_sun" = "butterfly_difference_cbrt ~ temperature_avg + s(butterflies_direct_sun_t_lag)",
    "T42_no_lag_smooth_threshold" = "butterfly_difference_cbrt ~ s(minutes_above_threshold) + temperature_avg + s(butterflies_direct_sun_t_lag)",
    "T43_no_lag_smooth_temp_sun" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T44_no_lag_smooth_all_main" = "butterfly_difference_cbrt ~ s(minutes_above_threshold) + s(temperature_avg) + s(butterflies_direct_sun_t_lag)",
    "T45_no_lag_time_of_day" = "butterfly_difference_cbrt ~ temperature_avg + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "T46_no_lag_temp_time" = "butterfly_difference_cbrt ~ s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)",
    "T47_no_lag_all_smooth_time" = "butterfly_difference_cbrt ~ s(minutes_above_threshold) + s(temperature_avg) + s(butterflies_direct_sun_t_lag) + s(time_within_day_t)"
)

cat("Total threshold-based models to fit:", length(threshold_model_specs), "\n")
```

## Threshold Model Fitting

```{r threshold-model-fitting}
#| cache: true
# Fit all threshold models
cat("Fitting threshold-based models...\n")
threshold_fitted_models <- map(threshold_model_specs, ~ fit_model_safely(.x, model_data))

# Remove failed models
threshold_successful_models <- threshold_fitted_models[!map_lgl(threshold_fitted_models, is.null)]
cat("Successfully fitted", length(threshold_successful_models), "out of", length(threshold_model_specs), "threshold models\n")
```

## Threshold Model Comparison

```{r threshold-model-comparison}
# Extract AIC values for threshold models
threshold_aic_results <- map_dfr(names(threshold_successful_models), function(model_name) {
    model <- threshold_successful_models[[model_name]]
    data.frame(
        Model = model_name,
        Formula = threshold_model_specs[[model_name]],
        AIC = AIC(model$lme),
        LogLik = logLik(model$lme)[1],
        df = attr(logLik(model$lme), "df")
    )
}) %>%
    arrange(AIC) %>%
    mutate(
        Delta_AIC = AIC - min(AIC),
        AIC_weight = exp(-0.5 * Delta_AIC) / sum(exp(-0.5 * Delta_AIC))
    )

# Display results
threshold_aic_results %>%
    select(Model, AIC, Delta_AIC, AIC_weight, df) %>%
    kable(digits = 3, caption = "Threshold model comparison by AIC")

# Show top 5 models
cat("\nTop 5 threshold models by AIC:\n")
head(threshold_aic_results, 5) %>%
    select(Model, Formula, AIC, Delta_AIC) %>%
    kable(digits = 3)
```

## Best Threshold Model Analysis

```{r best-threshold-model-analysis}
# Check if we have successfully fitted threshold models
if(length(threshold_successful_models) > 0 && nrow(threshold_aic_results) > 0) {
    # Get the best threshold model
    best_threshold_model_name <- threshold_aic_results$Model[1]
    best_threshold_model <- threshold_successful_models[[best_threshold_model_name]]

    cat("Best threshold model:", best_threshold_model_name, "\n")
    cat("Formula:", threshold_aic_results$Formula[1], "\n\n")

    # Model summary
    summary(best_threshold_model$gam)
} else {
    cat("No threshold models were successfully fitted, so no analysis can be performed.\n")
}
```

## Threshold Model Effect Plots

### Effect of Previous Butterfly Count

```{r threshold-effect-previous-count}
#| fig-width: 10
#| fig-height: 6
if(exists("best_threshold_model") && !is.null(best_threshold_model)) {
    plot(best_threshold_model$gam,
        select = 1, main = "Effect of Previous Butterfly Count (Threshold Model)",
        xlab = "Total Butterflies (t-lag)", ylab = "Partial Effect",
        residuals = TRUE, pch = 19, cex = 0.5
    )
} else {
    cat("No threshold model available for plotting\n")
}
```

### Effect of Minutes Above Threshold

```{r threshold-effect-minutes}
#| fig-width: 10
#| fig-height: 6
if(exists("best_threshold_model") && !is.null(best_threshold_model)) {
    # Find which smooth corresponds to minutes_above_threshold
    threshold_smooth_terms <- summary(best_threshold_model$gam)$s.table
    if("s(minutes_above_threshold)" %in% rownames(threshold_smooth_terms)) {
        select_num <- which(grepl("minutes_above_threshold", rownames(threshold_smooth_terms))) + 1
        plot(best_threshold_model$gam,
            select = select_num, main = "Effect of Minutes Above Threshold",
            xlab = "Minutes Above Threshold", ylab = "Partial Effect",
            residuals = TRUE, pch = 19, cex = 0.5
        )
    } else {
        cat("Minutes above threshold is not a smooth term in the best model\n")
    }
} else {
    cat("No threshold model available for plotting\n")
}
```

### Comparison: Max Gust vs Minutes Above Threshold

```{r comparison-plot}
#| fig-width: 12
#| fig-height: 8
# Create comparison plots
p1 <- ggplot(model_data, aes(x = max_gust)) +
    geom_histogram(bins = 30, fill = "lightblue", alpha = 0.7) +
    labs(title = "Distribution of Max Gust", x = "Max Gust (m/s)", y = "Frequency") +
    theme_minimal()

p2 <- ggplot(model_data, aes(x = minutes_above_threshold)) +
    geom_histogram(bins = 30, fill = "lightcoral", alpha = 0.7) +
    labs(title = "Distribution of Minutes Above Threshold", x = "Minutes Above Threshold", y = "Frequency") +
    theme_minimal()

p3 <- ggplot(model_data, aes(x = max_gust, y = minutes_above_threshold)) +
    geom_point(alpha = 0.5) +
    geom_smooth(method = "lm", se = TRUE) +
    labs(title = "Relationship: Max Gust vs Minutes Above Threshold",
         x = "Max Gust (m/s)", y = "Minutes Above Threshold") +
    theme_minimal()

# Show correlation
correlation <- cor(model_data$max_gust, model_data$minutes_above_threshold, use = "complete.obs")
p4 <- ggplot(model_data, aes(x = minutes_above_threshold, y = butterfly_difference_cbrt)) +
    geom_point(alpha = 0.3) +
    geom_smooth(method = "loess", se = TRUE, color = "red") +
    labs(title = "Minutes Above Threshold vs Butterfly Change",
         x = "Minutes Above Threshold", y = "Butterfly Difference (cbrt)") +
    theme_minimal()

grid.arrange(p1, p2, p3, p4, ncol = 2)
cat("Correlation between max_gust and minutes_above_threshold:", round(correlation, 3), "\n")
```

## Model Comparison: Gust vs Threshold Approaches

```{r model-approaches-comparison}
# Compare best models from each approach

# Check if threshold models were successfully fitted
if(length(threshold_successful_models) > 0 && exists("threshold_aic_results") && nrow(threshold_aic_results) > 0) {
    # Get the best threshold model
    best_threshold_model_name <- threshold_aic_results$Model[1]
    best_threshold_model <- threshold_successful_models[[best_threshold_model_name]]

    # Get model statistics
    gust_r_sq <- summary(best_model$gam)$r.sq
    threshold_r_sq <- summary(best_threshold_model$gam)$r.sq
    gust_dev <- summary(best_model$gam)$dev.expl
    threshold_dev <- summary(best_threshold_model$gam)$dev.expl



            comparison_df <- data.frame(
                Approach = c("Max Gust (Original)", "Minutes Above Threshold"),
                Best_Model = c(best_model_name, best_threshold_model_name),
                AIC = c(min(aic_results$AIC), min(threshold_aic_results$AIC)),
                R_squared = c(gust_r_sq, threshold_r_sq),
                Dev_Explained = c(
                    ifelse(is.null(gust_dev) || length(gust_dev) == 0, NA, gust_dev),
                    ifelse(is.null(threshold_dev) || length(threshold_dev) == 0, NA, threshold_dev)
                )
            )

    kable(comparison_df, digits = 4,
          caption = "Comparison of Max Gust vs Minutes Above Threshold Approaches")
} else {
    cat("No threshold models were successfully fitted. This may be due to:\n")
    cat("- Missing or invalid minutes_above_threshold data\n")
    cat("- Model convergence issues\n")
    cat("- Data structure problems\n")

    # Check the minutes_above_threshold variable
    cat("\nSummary of minutes_above_threshold variable:\n")
    summary(model_data$minutes_above_threshold)

    cat("\nFirst few values:\n")
    head(model_data$minutes_above_threshold, 10)

    cat("\nNumber of non-missing values:", sum(!is.na(model_data$minutes_above_threshold)), "\n")
    cat("Number of zero values:", sum(model_data$minutes_above_threshold == 0, na.rm = TRUE), "\n")
    cat("Number of positive values:", sum(model_data$minutes_above_threshold > 0, na.rm = TRUE), "\n")
}
```

## Results Summary

This analysis provides robust evidence regarding wind effects on overwintering monarch butterfly movement through comprehensive model comparison across 47 candidate models. The results reveal several key findings:

**Wind Effects:** Wind was not selected in the best-performing model and only appeared once in the top 5 models (plotted above) with a non-significant effect (p = 0.218). This suggests that wind is not a primary driver of short-term monarch movement patterns at the temporal and spatial scales examined.

**Primary Drivers:** Temperature and diurnal patterns emerged as the strongest predictors of monarch movement. The best model revealed non-linear temperature responses with apparent thermal optima, and strong diurnal cycles consistent with monarch thermoregulatory behavior.

**Model Performance:** Including smooth terms substantially improved model fit (R² increased from 2.74% to 5.61%), highlighting the importance of capturing non-linear relationships in ecological modeling.

**Threshold vs Peak Wind Analysis:** The comparison between maximum gust speed and minutes above threshold provides insight into different aspects of wind exposure. While both approaches test wind effects, minutes above threshold captures sustained high wind periods rather than instantaneous peaks.

**Hypothesis Evaluation:** These results do not support the hypothesis that wind acts as a disruptive force to overwintering monarchs at the 30-minute temporal scale examined, regardless of whether wind is measured as peak gusts or sustained periods above threshold.

## Publication-Ready Exports

The following section exports all figures and tables needed for the thesis results section.

```{r thesis-exports}
# Set up export directory
export_dir <- here("thesis_exports")
fig_dir <- file.path(export_dir, "figures")
tab_dir <- file.path(export_dir, "tables")

# Create directories if they don't exist
if (!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
if (!dir.exists(fig_dir)) dir.create(fig_dir, recursive = TRUE)
if (!dir.exists(tab_dir)) dir.create(tab_dir, recursive = TRUE)

# Load additional packages for publication-ready plots
library(ggthemes)
library(scales)

# Define publication theme
pub_theme <- theme_classic(base_size = 12) +
  theme(
    axis.text = element_text(color = "black"),
    axis.title = element_text(color = "black"),
    legend.text = element_text(color = "black"),
    legend.title = element_text(color = "black"),
    strip.text = element_text(color = "black"),
    plot.title = element_text(color = "black", hjust = 0.5),
    panel.grid.major = element_line(color = "gray90", size = 0.5),
    panel.grid.minor = element_blank(),
    legend.position = "bottom"
  )

cat("Export directories created successfully\n")
```

### Model Selection Table Export

```{r export-model-selection-table}
# Function to extract max_gust p-value from a model
get_max_gust_pvalue <- function(model_name) {
  if (model_name %in% names(successful_models)) {
    model <- successful_models[[model_name]]
    
    # Check parametric terms first (linear effects)
    param_summary <- summary(model$gam)$p.table
    if ("max_gust" %in% rownames(param_summary)) {
      return(format.pval(param_summary["max_gust", "Pr(>|t|)"], digits = 3))
    }
    
    # Check smooth terms 
    smooth_summary <- summary(model$gam)$s.table
    gust_smooth_rows <- grep("max_gust", rownames(smooth_summary))
    if (length(gust_smooth_rows) > 0) {
      return(format.pval(smooth_summary[gust_smooth_rows[1], "p-value"], digits = 3))
    }
  }
  return("NA")
}

# Create comprehensive model selection table (top 10 models)
model_selection_table <- aic_results %>%
  head(10) %>%
  mutate(
    AIC_weight = round(AIC_weight, 4),
    Delta_AIC = round(Delta_AIC, 3),
    AIC = round(AIC, 3),
    max_gust_p = map_chr(Model, get_max_gust_pvalue)
  ) %>%
  select(Model, AIC, Delta_AIC, AIC_weight, df, max_gust_p) %>%
  rename(
    "Model ID" = Model,
    "AIC" = AIC,
    "ΔAIC" = Delta_AIC,
    "AIC Weight" = AIC_weight,
    "df" = df,
    "Wind p-value" = max_gust_p
  )

# Export as CSV
write_csv(model_selection_table, file.path(tab_dir, "model_selection_table.csv"))

# Export as formatted kable for LaTeX
kable_output <- kable(model_selection_table, 
                     format = "latex", 
                     booktabs = TRUE,
                     caption = "Top 10 candidate models ranked by AIC for monarch butterfly abundance change analysis. Wind p-value shows significance of max_gust term when present in model.")

writeLines(kable_output, file.path(tab_dir, "model_selection_table.tex"))

cat("Model selection table exported to:", file.path(tab_dir, "model_selection_table.csv"), "\n")
```

### Smooth Terms Summary Table Export

```{r export-smooth-terms-table}
# Extract smooth terms summary from best model
smooth_summary <- summary(best_model$gam)$s.table
parametric_summary <- summary(best_model$gam)$p.table

# Create formatted smooth terms table
smooth_terms_df <- data.frame(
  Term = rownames(smooth_summary),
  EDF = round(smooth_summary[, "edf"], 3),
  Ref_df = round(smooth_summary[, "Ref.df"], 3),
  F_value = round(smooth_summary[, "F"], 3),
  p_value = format.pval(smooth_summary[, "p-value"], digits = 3)
) %>%
  mutate(
    Term = case_when(
      grepl("total_butterflies_t_lag", Term) ~ "Lagged roost size",
      grepl("temperature_avg", Term) ~ "Average temperature",
      grepl("butterflies_direct_sun_t_lag", Term) ~ "Direct sun exposure",
      grepl("time_within_day_t", Term) ~ "Time within day",
      TRUE ~ Term
    )
  )

# Export smooth terms table
write_csv(smooth_terms_df, file.path(tab_dir, "smooth_terms_summary.csv"))

# Export as LaTeX
smooth_kable <- kable(smooth_terms_df,
                     format = "latex",
                     booktabs = TRUE,
                     col.names = c("Smooth Term", "EDF", "Ref. df", "F", "p-value"),
                     caption = "Summary of smooth terms in the best-fit GAM model")

writeLines(smooth_kable, file.path(tab_dir, "smooth_terms_summary.tex"))

cat("Smooth terms summary exported to:", file.path(tab_dir, "smooth_terms_summary.csv"), "\n")
```

### Publication-Ready Partial Effect Plots

```{r export-partial-effects}
# Create individual partial effect plots using base plot() function
# These show the full range and relationship clearly

# Effect of Lagged Roost Size
png(file.path(fig_dir, "effect_lagged_roost_size.png"), 
    width = 8, height = 6, units = "in", res = 300)
plot(best_model$gam, select = 1, 
     main = "Effect of Lagged Roost Size",
     xlab = "Total butterflies (t-lag)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightblue",
     cex.main = 1.2, cex.lab = 1.1, cex.axis = 1.0)
dev.off()

# Effect of Temperature
png(file.path(fig_dir, "effect_temperature.png"), 
    width = 8, height = 6, units = "in", res = 300)
plot(best_model$gam, select = 2,
     main = "Effect of Average Temperature",
     xlab = "Average temperature (°C)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightcoral",
     cex.main = 1.2, cex.lab = 1.1, cex.axis = 1.0)
dev.off()

# Effect of Direct Sun Exposure
png(file.path(fig_dir, "effect_sun_exposure.png"), 
    width = 8, height = 6, units = "in", res = 300)
plot(best_model$gam, select = 3,
     main = "Effect of Direct Sun Exposure",
     xlab = "Butterflies in direct sun (t-lag)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "orange",
     cex.main = 1.2, cex.lab = 1.1, cex.axis = 1.0)
dev.off()

# Diurnal Pattern
png(file.path(fig_dir, "effect_diurnal_pattern.png"), 
    width = 8, height = 6, units = "in", res = 300)
plot(best_model$gam, select = 4,
     main = "Diurnal Pattern",
     xlab = "Time within day (minutes)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightgreen",
     cex.main = 1.2, cex.lab = 1.1, cex.axis = 1.0)
dev.off()

# Create combined panel figure
png(file.path(fig_dir, "combined_partial_effects.png"), 
    width = 12, height = 10, units = "in", res = 300)
par(mfrow = c(2, 2), mar = c(4, 4, 3, 2))

plot(best_model$gam, select = 1, 
     main = "Effect of Lagged Roost Size",
     xlab = "Total butterflies (t-lag)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightblue",
     cex.main = 1.1, cex.lab = 1.0, cex.axis = 0.9)

plot(best_model$gam, select = 2,
     main = "Effect of Average Temperature",
     xlab = "Average temperature (°C)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightcoral",
     cex.main = 1.1, cex.lab = 1.0, cex.axis = 0.9)

plot(best_model$gam, select = 3,
     main = "Effect of Direct Sun Exposure",
     xlab = "Butterflies in direct sun (t-lag)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "orange",
     cex.main = 1.1, cex.lab = 1.0, cex.axis = 0.9)

plot(best_model$gam, select = 4,
     main = "Diurnal Pattern",
     xlab = "Time within day (minutes)", 
     ylab = "Partial effect",
     shade = TRUE, shade.col = "lightgreen",
     cex.main = 1.1, cex.lab = 1.0, cex.axis = 0.9)

dev.off()
par(mfrow = c(1, 1)) # Reset to single plot

cat("Partial effect plots exported to:", fig_dir, "\n")
```

### Model Diagnostics Plots Export

```{r export-diagnostics}
# Create publication-ready residuals vs fitted plot
residuals_df <- data.frame(
  fitted = fitted(best_model$lme),
  residuals = residuals(best_model$lme, type = "normalized")
)

p_resid <- ggplot(residuals_df, aes(x = fitted, y = residuals)) +
  geom_point(alpha = 0.4, color = "darkgray") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  geom_smooth(method = "loess", se = TRUE, color = "blue", alpha = 0.3) +
  labs(
    title = "Residuals vs Fitted Values",
    x = "Fitted values",
    y = "Standardized residuals"
  ) +
  pub_theme

# Create publication-ready Q-Q plot
p_qq <- ggplot(residuals_df, aes(sample = residuals)) +
  stat_qq(alpha = 0.4, color = "darkgray") +
  stat_qq_line(color = "red", linetype = "dashed") +
  labs(
    title = "Normal Q-Q Plot",
    x = "Theoretical quantiles",
    y = "Sample quantiles"
  ) +
  pub_theme

# Export diagnostic plots
ggsave(file.path(fig_dir, "residuals_vs_fitted.png"), p_resid,
       width = 8, height = 6, dpi = 300, bg = "white")
ggsave(file.path(fig_dir, "qq_plot.png"), p_qq,
       width = 8, height = 6, dpi = 300, bg = "white")

# Combined diagnostics plot
combined_diagnostics <- gridExtra::grid.arrange(p_resid, p_qq, ncol = 2)
ggsave(file.path(fig_dir, "combined_diagnostics.png"), combined_diagnostics,
       width = 12, height = 6, dpi = 300, bg = "white")

cat("Diagnostic plots exported to:", fig_dir, "\n")
```

### Wind Hypothesis Evaluation Plot

```{r export-wind-scatter}
# Create publication-ready wind scatter plot
wind_cor <- cor(model_data$max_gust, model_data$butterfly_difference_cbrt, use = "complete.obs")

p_wind <- ggplot(model_data, aes(x = max_gust, y = butterfly_difference_cbrt)) +
  geom_point(alpha = 0.4, color = "darkgray") +
  geom_smooth(method = "lm", se = TRUE, color = "steelblue", alpha = 0.3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha = 0.7) +
  labs(
    title = "Wind Speed vs Butterfly Abundance Change",
    subtitle = paste0("Correlation: r = ", round(wind_cor, 3)),
    x = "Maximum wind gust (m/s)",
    y = "Butterfly abundance change (cube root transformed)"
  ) +
  pub_theme

ggsave(file.path(fig_dir, "wind_hypothesis_scatter.png"), p_wind,
       width = 8, height = 6, dpi = 300, bg = "white")

cat("Wind hypothesis scatter plot exported to:", fig_dir, "\n")
```

### Data Summary Export

```{r export-data-summary}
# Create data summary statistics
data_summary <- model_data %>%
  summarise(
    N_observations = n(),
    N_deployments = n_distinct(deployment_id),
    N_deployment_days = n_distinct(deployment_day),
    Mean_butterflies = round(mean(total_butterflies_t_lag, na.rm = TRUE), 1),
    SD_butterflies = round(sd(total_butterflies_t_lag, na.rm = TRUE), 1),
    Mean_temp = round(mean(temperature_avg, na.rm = TRUE), 1),
    SD_temp = round(sd(temperature_avg, na.rm = TRUE), 1),
    Mean_wind = round(mean(max_gust, na.rm = TRUE), 1),
    SD_wind = round(sd(max_gust, na.rm = TRUE), 1)
  ) %>%
  pivot_longer(everything(), names_to = "Statistic", values_to = "Value") %>%
  mutate(
    Statistic = case_when(
      Statistic == "N_observations" ~ "Total observations",
      Statistic == "N_deployments" ~ "Unique deployments", 
      Statistic == "N_deployment_days" ~ "Deployment-day combinations",
      Statistic == "Mean_butterflies" ~ "Mean butterfly count",
      Statistic == "SD_butterflies" ~ "SD butterfly count",
      Statistic == "Mean_temp" ~ "Mean temperature (°C)",
      Statistic == "SD_temp" ~ "SD temperature (°C)", 
      Statistic == "Mean_wind" ~ "Mean wind gust (m/s)",
      Statistic == "SD_wind" ~ "SD wind gust (m/s)",
      TRUE ~ Statistic
    )
  )

write_csv(data_summary, file.path(tab_dir, "data_summary.csv"))

# Export as LaTeX table
summary_kable <- kable(data_summary,
                      format = "latex",
                      booktabs = TRUE,
                      col.names = c("Statistic", "Value"),
                      caption = "Summary statistics for the monarch butterfly analysis dataset")

writeLines(summary_kable, file.path(tab_dir, "data_summary.tex"))

cat("Data summary exported to:", file.path(tab_dir, "data_summary.csv"), "\n")
```

### Export Summary Report

```{r export-summary}
# Create a summary file with all export information
export_summary <- paste0(
  "# Monarch GAM Analysis - Thesis Exports\n\n",
  "Export completed on: ", Sys.time(), "\n\n",
  "## Files Created:\n\n",
  "### Tables:\n",
  "- model_selection_table.csv/tex: Top 10 models by AIC\n",
  "- smooth_terms_summary.csv/tex: Summary of smooth terms in best model\n", 
  "- data_summary.csv/tex: Dataset summary statistics\n\n",
  "### Figures:\n",
  "- effect_lagged_roost_size.png: Partial effect of previous butterfly count\n",
  "- effect_temperature.png: Partial effect of temperature\n",
  "- effect_sun_exposure.png: Partial effect of direct sun exposure\n",
  "- effect_diurnal_pattern.png: Diurnal pattern effect\n",
  "- combined_partial_effects.png: All partial effects in one figure\n",
  "- residuals_vs_fitted.png: Model diagnostic plot\n",
  "- qq_plot.png: Normal Q-Q plot of residuals\n",
  "- combined_diagnostics.png: Both diagnostic plots combined\n",
  "- wind_hypothesis_scatter.png: Wind speed vs butterfly change scatter plot\n\n",
  "## Key Results for Thesis:\n",
  "- Best model: ", best_model_name, "\n",
  "- Best model AIC: ", round(min(aic_results$AIC), 3), "\n",
  "- Model R²: ", round(summary(best_model$gam)$r.sq, 4), "\n",
  "- Wind hypothesis: NOT SUPPORTED (wind not in best model)\n\n",
  "All files are publication-ready with 300 DPI resolution and clean formatting."
)

writeLines(export_summary, file.path(export_dir, "export_summary.txt"))

cat("\n=== EXPORT COMPLETE ===\n")
cat("All publication-ready files exported to:", export_dir, "\n")
cat("Check export_summary.txt for complete file listing\n")
```
