sd_prop_sunlight = NA_real_
)
}
# Store all metrics for this interval
interval_metrics[[i]] <- c(
interval_id = interval$interval_id,
wind_metrics,
temp_metrics,
sun_metrics
)
}
# Convert to dataframe
cat("Combining results...\n")
metrics_df <- do.call(rbind, lapply(interval_metrics, as.data.frame))
# Join back with original data
final_df_with_intervals <- final_df %>%
left_join(unique_intervals, by = c("view_id", "wind_meter_name", "datetime_t_minus_1", "datetime")) %>%
left_join(metrics_df, by = "interval_id") %>%
select(-interval_id)
# Remove rows with too many NAs in predictors
final_clean <- final_df_with_intervals %>%
filter(!is.na(mean_wind_speed) & !is.na(mean_temp))
# CRITICAL: Sort data for brms autocorrelation structure
# Data must be sorted by grouping variable (view_id) and then by time (datetime)
final_clean <- final_clean %>%
arrange(view_id, datetime)
cat("Final dataset rows:", nrow(final_clean), "\n")
if(nrow(final_clean) > 0) {
cat("Time delta range:", round(min(final_clean$time_delta_mins, na.rm = TRUE), 1),
"to", round(max(final_clean$time_delta_mins, na.rm = TRUE), 1), "minutes\n")
}
return(final_clean)
}
data_30m <- prepare_lag_data(master_df, wind, lag_minutes = 30)
# Define the global model formula for testing
global_formula <- bf(total_butterflies ~ s(abundance_t_minus_1, k = 20) +
s(mean_wind_speed) +
s(mean_temp) +
s(sunlight_proportion) +
t2(mean_wind_speed, mean_temp) +
t2(mean_wind_speed, sunlight_proportion) +
t2(mean_temp, sunlight_proportion) +
(1 | view_id) +
ar(time = datetime, gr = view_id, p = 1))
cat("Testing Global Model with full interactions\n")
cat("===========================================\n\n")
# Check data before fitting
model_vars <- all.vars(global_formula)
model_data <- data_30m %>%
select(all_of(model_vars), view_id, datetime) %>%  # Include datetime for autocorrelation
na.omit() %>%
arrange(view_id, datetime)  # Ensure proper sorting
cat("Model data dimensions after removing NAs:", nrow(model_data), "x", ncol(model_data), "\n")
cat("Variables in model:", paste(model_vars, collapse = ", "), "\n")
# Check if we have enough data
if(nrow(model_data) < 50) {
cat("Warning: Very few observations (", nrow(model_data), ") for this model\n")
}
# Check for sufficient variation in view_id
view_counts <- table(model_data$view_id)
cat("View IDs with observations:", length(view_counts), "\n")
cat("Min/Max observations per view:", min(view_counts), "/", max(view_counts), "\n")
cat("\nFitting Bayesian GAM with brms...\n")
cat("This may take several minutes...\n\n")
# Fit Bayesian GAM with brms
global_model <- brm(
global_formula,
family = negbinomial(),
data = model_data,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
backend = "rstan",  # Use rstan as fallback if cmdstanr not available
control = list(adapt_delta = 0.95, max_treedepth = 12),
silent = 2,  # Suppress most output for cleaner logs
refresh = 0  # Suppress sampling progress
)
cat("Checking available variables in the prepared dataset...\n")
cat("Column names:\n")
print(names(data_30m))
cat("\nLooking for key variables:\n")
# Check for response variable
response_vars <- names(data_30m)[grepl("butterfl", names(data_30m), ignore.case = TRUE)]
cat("Response variables (containing 'butterfl'):", paste(response_vars, collapse = ", "), "\n")
# Check for lag variable
lag_vars <- names(data_30m)[grepl("minus|lag|t_", names(data_30m), ignore.case = TRUE)]
cat("Lag variables (containing 'minus', 'lag', or 't_'):", paste(lag_vars, collapse = ", "), "\n")
# Check for wind variables
wind_vars <- names(data_30m)[grepl("wind", names(data_30m), ignore.case = TRUE)]
cat("Wind variables:", paste(wind_vars, collapse = ", "), "\n")
# Check for temperature variables
temp_vars <- names(data_30m)[grepl("temp", names(data_30m), ignore.case = TRUE)]
cat("Temperature variables:", paste(temp_vars, collapse = ", "), "\n")
# Check for sunlight variables
sun_vars <- names(data_30m)[grepl("sun|light|proportion", names(data_30m), ignore.case = TRUE)]
cat("Sunlight variables:", paste(sun_vars, collapse = ", "), "\n")
# Check for time/date variables
time_vars <- names(data_30m)[grepl("time|date", names(data_30m), ignore.case = TRUE)]
cat("Time variables:", paste(time_vars, collapse = ", "), "\n")
# First, let's identify the correct variable names
if(nrow(data_30m) == 0) {
stop("No data available in data_30m. Check data preparation steps.")
}
# Check which variables are actually available and create appropriate formula
available_vars <- names(data_30m)
# Try to identify correct variable names
response_var <- if("total_butterflies" %in% available_vars) {
"total_butterflies"
} else {
response_vars <- available_vars[grepl("butterfl", available_vars, ignore.case = TRUE)]
if(length(response_vars) > 0) response_vars[1] else stop("No response variable found")
}
lag_var <- if("abundance_t_minus_1" %in% available_vars) {
"abundance_t_minus_1"
} else {
lag_vars <- available_vars[grepl("minus|lag", available_vars, ignore.case = TRUE)]
if(length(lag_vars) > 0) lag_vars[1] else stop("No lag variable found")
}
wind_var <- if("mean_wind_speed" %in% available_vars) {
"mean_wind_speed"
} else {
wind_vars <- available_vars[grepl("wind.*mean|mean.*wind", available_vars, ignore.case = TRUE)]
if(length(wind_vars) > 0) wind_vars[1] else stop("No wind variable found")
}
temp_var <- if("mean_temp" %in% available_vars) {
"mean_temp"
} else {
temp_vars <- available_vars[grepl("temp.*mean|mean.*temp", available_vars, ignore.case = TRUE)]
if(length(temp_vars) > 0) temp_vars[1] else stop("No temperature variable found")
}
sun_var <- if("sunlight_proportion" %in% available_vars) {
"sunlight_proportion"
} else {
sun_vars <- available_vars[grepl("sun|light|proportion", available_vars, ignore.case = TRUE)]
if(length(sun_vars) > 0) sun_vars[1] else stop("No sunlight variable found")
}
time_var <- if("datetime" %in% available_vars) {
"datetime"
} else {
time_vars <- available_vars[grepl("time|date", available_vars, ignore.case = TRUE)]
if(length(time_vars) > 0) time_vars[1] else stop("No time variable found")
}
cat("Using these variables:\n")
cat("Response:", response_var, "\n")
cat("Lag:", lag_var, "\n")
cat("Wind:", wind_var, "\n")
cat("Temperature:", temp_var, "\n")
cat("Sunlight:", sun_var, "\n")
cat("Time:", time_var, "\n")
# Define the global model formula with correct variable names
global_formula <- bf(paste0(response_var, " ~ s(", lag_var, ", k = 20) +
s(", wind_var, ") +
s(", temp_var, ") +
s(", sun_var, ") +
t2(", wind_var, ", ", temp_var, ") +
t2(", wind_var, ", ", sun_var, ") +
t2(", temp_var, ", ", sun_var, ") +
(1 | view_id) +
ar(time = ", time_var, ", gr = view_id, p = 1)"))
cat("Testing Global Model with full interactions\n")
cat("===========================================\n\n")
# Check data before fitting
model_vars <- all.vars(global_formula)
model_data <- data_30m %>%
select(all_of(model_vars), view_id, datetime) %>%  # Include datetime for autocorrelation
na.omit() %>%
arrange(view_id, datetime)  # Ensure proper sorting
cat("Model data dimensions after removing NAs:", nrow(model_data), "x", ncol(model_data), "\n")
cat("Variables in model:", paste(model_vars, collapse = ", "), "\n")
# Check if we have enough data
if(nrow(model_data) < 50) {
cat("Warning: Very few observations (", nrow(model_data), ") for this model\n")
}
# Check for sufficient variation in view_id
view_counts <- table(model_data$view_id)
cat("View IDs with observations:", length(view_counts), "\n")
cat("Min/Max observations per view:", min(view_counts), "/", max(view_counts), "\n")
cat("\nFitting Bayesian GAM with brms...\n")
cat("This may take several minutes...\n\n")
# Fit Bayesian GAM with brms
global_model <- brm(
global_formula,
family = negbinomial(),
data = model_data,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
backend = "rstan",  # Use rstan as fallback if cmdstanr not available
control = list(adapt_delta = 0.95, max_treedepth = 12),
silent = 2,  # Suppress most output for cleaner logs
refresh = 0  # Suppress sampling progress
)
# First, let's identify the correct variable names
if(nrow(data_30m) == 0) {
stop("No data available in data_30m. Check data preparation steps.")
}
# Check which variables are actually available and create appropriate formula
available_vars <- names(data_30m)
# Try to identify correct variable names
response_var <- if("total_butterflies" %in% available_vars) {
"total_butterflies"
} else {
response_vars <- available_vars[grepl("butterfl", available_vars, ignore.case = TRUE)]
if(length(response_vars) > 0) response_vars[1] else stop("No response variable found")
}
lag_var <- if("abundance_t_minus_1" %in% available_vars) {
"abundance_t_minus_1"
} else {
lag_vars <- available_vars[grepl("minus|lag", available_vars, ignore.case = TRUE)]
if(length(lag_vars) > 0) lag_vars[1] else stop("No lag variable found")
}
wind_var <- if("mean_wind_speed" %in% available_vars) {
"mean_wind_speed"
} else {
wind_vars <- available_vars[grepl("wind.*mean|mean.*wind", available_vars, ignore.case = TRUE)]
if(length(wind_vars) > 0) wind_vars[1] else stop("No wind variable found")
}
temp_var <- if("mean_temp" %in% available_vars) {
"mean_temp"
} else {
temp_vars <- available_vars[grepl("temp.*mean|mean.*temp", available_vars, ignore.case = TRUE)]
if(length(temp_vars) > 0) temp_vars[1] else stop("No temperature variable found")
}
sun_var <- if("sunlight_proportion" %in% available_vars) {
"sunlight_proportion"
} else {
sun_vars <- available_vars[grepl("sun|light|proportion", available_vars, ignore.case = TRUE)]
if(length(sun_vars) > 0) sun_vars[1] else stop("No sunlight variable found")
}
time_var <- if("datetime" %in% available_vars) {
"datetime"
} else {
time_vars <- available_vars[grepl("time|date", available_vars, ignore.case = TRUE)]
if(length(time_vars) > 0) time_vars[1] else stop("No time variable found")
}
cat("Using these variables:\n")
cat("Response:", response_var, "\n")
cat("Lag:", lag_var, "\n")
cat("Wind:", wind_var, "\n")
cat("Temperature:", temp_var, "\n")
cat("Sunlight:", sun_var, "\n")
cat("Time:", time_var, "\n")
# Define the global model formula with correct variable names
# Since all the expected variables are present, use them directly
global_formula <- bf(total_butterflies ~ s(abundance_t_minus_1, k = 20) +
s(mean_wind_speed) +
s(mean_temp) +
s(sunlight_proportion) +
t2(mean_wind_speed, mean_temp) +
t2(mean_wind_speed, sunlight_proportion) +
t2(mean_temp, sunlight_proportion) +
(1 | view_id) +
ar(time = datetime, gr = view_id, p = 1))
cat("Formula created successfully\n")
print(global_formula)
cat("Testing Global Model with full interactions\n")
cat("===========================================\n\n")
# Check data before fitting
model_vars <- all.vars(global_formula)
cat("Variables extracted from formula:", paste(model_vars, collapse = ", "), "\n")
# Check which variables are actually available
missing_vars <- model_vars[!model_vars %in% names(data_30m)]
if(length(missing_vars) > 0) {
cat("Missing variables:", paste(missing_vars, collapse = ", "), "\n")
stop("Some variables from the formula are not in the data")
}
model_data <- data_30m %>%
select(all_of(c(model_vars, "view_id"))) %>%  # Include all needed variables
na.omit() %>%
arrange(view_id, datetime)  # Ensure proper sorting
# First, let's identify the correct variable names
if(nrow(data_30m) == 0) {
stop("No data available in data_30m. Check data preparation steps.")
}
# Check which variables are actually available and create appropriate formula
available_vars <- names(data_30m)
# Try to identify correct variable names
response_var <- if("total_butterflies" %in% available_vars) {
"total_butterflies"
} else {
response_vars <- available_vars[grepl("butterfl", available_vars, ignore.case = TRUE)]
if(length(response_vars) > 0) response_vars[1] else stop("No response variable found")
}
lag_var <- if("abundance_t_minus_1" %in% available_vars) {
"abundance_t_minus_1"
} else {
lag_vars <- available_vars[grepl("minus|lag", available_vars, ignore.case = TRUE)]
if(length(lag_vars) > 0) lag_vars[1] else stop("No lag variable found")
}
wind_var <- if("mean_wind_speed" %in% available_vars) {
"mean_wind_speed"
} else {
wind_vars <- available_vars[grepl("wind.*mean|mean.*wind", available_vars, ignore.case = TRUE)]
if(length(wind_vars) > 0) wind_vars[1] else stop("No wind variable found")
}
temp_var <- if("mean_temp" %in% available_vars) {
"mean_temp"
} else {
temp_vars <- available_vars[grepl("temp.*mean|mean.*temp", available_vars, ignore.case = TRUE)]
if(length(temp_vars) > 0) temp_vars[1] else stop("No temperature variable found")
}
sun_var <- if("sunlight_proportion" %in% available_vars) {
"sunlight_proportion"
} else {
sun_vars <- available_vars[grepl("sun|light|proportion", available_vars, ignore.case = TRUE)]
if(length(sun_vars) > 0) sun_vars[1] else stop("No sunlight variable found")
}
time_var <- if("datetime" %in% available_vars) {
"datetime"
} else {
time_vars <- available_vars[grepl("time|date", available_vars, ignore.case = TRUE)]
if(length(time_vars) > 0) time_vars[1] else stop("No time variable found")
}
cat("Using these variables:\n")
cat("Response:", response_var, "\n")
cat("Lag:", lag_var, "\n")
cat("Wind:", wind_var, "\n")
cat("Temperature:", temp_var, "\n")
cat("Sunlight:", sun_var, "\n")
cat("Time:", time_var, "\n")
# Define the global model formula with correct variable names
# Since all the expected variables are present, use them directly
global_formula <- bf(total_butterflies ~ s(abundance_t_minus_1, k = 20) +
s(mean_wind_speed) +
s(mean_temp) +
s(sunlight_proportion) +
t2(mean_wind_speed, mean_temp) +
t2(mean_wind_speed, sunlight_proportion) +
t2(mean_temp, sunlight_proportion) +
(1 | view_id) +
ar(time = datetime, gr = view_id, p = 1))
cat("Formula created successfully\n")
print(global_formula)
cat("Testing Global Model with full interactions\n")
cat("===========================================\n\n")
# Check data before fitting
model_vars <- all.vars(global_formula)
cat("Variables extracted from formula:", paste(model_vars, collapse = ", "), "\n")
# Check which variables are actually available
missing_vars <- model_vars[!model_vars %in% names(data_30m)]
if(length(missing_vars) > 0) {
cat("Missing variables:", paste(missing_vars, collapse = ", "), "\n")
stop("Some variables from the formula are not in the data")
}
model_data <- data_30m %>%
select(all_of(c(model_vars, "view_id", "datetime"))) %>%  # Include all needed variables plus datetime
na.omit() %>%
arrange(view_id, datetime)  # Ensure proper sorting
cat("Model data dimensions after removing NAs:", nrow(model_data), "x", ncol(model_data), "\n")
cat("Variables in model:", paste(model_vars, collapse = ", "), "\n")
# Check if we have enough data
if(nrow(model_data) < 50) {
cat("Warning: Very few observations (", nrow(model_data), ") for this model\n")
}
# Check for sufficient variation in view_id
view_counts <- table(model_data$view_id)
cat("View IDs with observations:", length(view_counts), "\n")
cat("Min/Max observations per view:", min(view_counts), "/", max(view_counts), "\n")
cat("\nFitting Bayesian GAM with brms...\n")
cat("This may take several minutes...\n\n")
# Fit Bayesian GAM with brms
global_model <- brm(
global_formula,
family = negbinomial(),
data = model_data,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
backend = "rstan",  # Use rstan as fallback if cmdstanr not available
control = list(adapt_delta = 0.95, max_treedepth = 12),
silent = 2,  # Suppress most output for cleaner logs
refresh = 0  # Suppress sampling progress
)
# First, let's identify the correct variable names
if(nrow(data_30m) == 0) {
stop("No data available in data_30m. Check data preparation steps.")
}
# Check which variables are actually available and create appropriate formula
available_vars <- names(data_30m)
# Try to identify correct variable names
response_var <- if("total_butterflies" %in% available_vars) {
"total_butterflies"
} else {
response_vars <- available_vars[grepl("butterfl", available_vars, ignore.case = TRUE)]
if(length(response_vars) > 0) response_vars[1] else stop("No response variable found")
}
lag_var <- if("abundance_t_minus_1" %in% available_vars) {
"abundance_t_minus_1"
} else {
lag_vars <- available_vars[grepl("minus|lag", available_vars, ignore.case = TRUE)]
if(length(lag_vars) > 0) lag_vars[1] else stop("No lag variable found")
}
wind_var <- if("mean_wind_speed" %in% available_vars) {
"mean_wind_speed"
} else {
wind_vars <- available_vars[grepl("wind.*mean|mean.*wind", available_vars, ignore.case = TRUE)]
if(length(wind_vars) > 0) wind_vars[1] else stop("No wind variable found")
}
temp_var <- if("mean_temp" %in% available_vars) {
"mean_temp"
} else {
temp_vars <- available_vars[grepl("temp.*mean|mean.*temp", available_vars, ignore.case = TRUE)]
if(length(temp_vars) > 0) temp_vars[1] else stop("No temperature variable found")
}
sun_var <- if("sunlight_proportion" %in% available_vars) {
"sunlight_proportion"
} else {
sun_vars <- available_vars[grepl("sun|light|proportion", available_vars, ignore.case = TRUE)]
if(length(sun_vars) > 0) sun_vars[1] else stop("No sunlight variable found")
}
time_var <- if("datetime" %in% available_vars) {
"datetime"
} else {
time_vars <- available_vars[grepl("time|date", available_vars, ignore.case = TRUE)]
if(length(time_vars) > 0) time_vars[1] else stop("No time variable found")
}
cat("Using these variables:\n")
cat("Response:", response_var, "\n")
cat("Lag:", lag_var, "\n")
cat("Wind:", wind_var, "\n")
cat("Temperature:", temp_var, "\n")
cat("Sunlight:", sun_var, "\n")
cat("Time:", time_var, "\n")
# Define the global model formula with correct variable names
# Since all the expected variables are present, use them directly
global_formula <- bf(total_butterflies ~ s(abundance_t_minus_1, k = 20) +
s(mean_wind_speed) +
s(mean_temp) +
s(sunlight_proportion) +
t2(mean_wind_speed, mean_temp) +
t2(mean_wind_speed, sunlight_proportion) +
t2(mean_temp, sunlight_proportion) +
(1 | view_id) +
ar(time = datetime, gr = view_id, p = 1))
cat("Formula created successfully\n")
print(global_formula)
cat("Testing Global Model with full interactions\n")
cat("===========================================\n\n")
# Check data before fitting
model_vars <- all.vars(global_formula)
cat("Variables extracted from formula:", paste(model_vars, collapse = ", "), "\n")
# Check which variables are actually available
missing_vars <- model_vars[!model_vars %in% names(data_30m)]
if(length(missing_vars) > 0) {
cat("Missing variables:", paste(missing_vars, collapse = ", "), "\n")
stop("Some variables from the formula are not in the data")
}
model_data <- data_30m %>%
select(all_of(c(model_vars, "view_id", "datetime"))) %>%  # Include all needed variables plus datetime
na.omit() %>%
arrange(view_id, datetime)  # Ensure proper sorting
cat("Model data dimensions after removing NAs:", nrow(model_data), "x", ncol(model_data), "\n")
cat("Variables in model:", paste(model_vars, collapse = ", "), "\n")
# Debug: Show what's actually in model_data
cat("\nColumns in model_data:\n")
print(names(model_data))
cat("\nFirst few rows of model_data:\n")
print(head(model_data, 3))
cat("\nChecking if key variables exist in model_data:\n")
key_vars <- c("total_butterflies", "abundance_t_minus_1", "mean_wind_speed", "mean_temp", "sunlight_proportion", "datetime", "view_id")
for(var in key_vars) {
cat(var, ":", var %in% names(model_data), "\n")
}
# Check if we have enough data
if(nrow(model_data) < 50) {
cat("Warning: Very few observations (", nrow(model_data), ") for this model\n")
}
# Check for sufficient variation in view_id
view_counts <- table(model_data$view_id)
cat("View IDs with observations:", length(view_counts), "\n")
cat("Min/Max observations per view:", min(view_counts), "/", max(view_counts), "\n")
cat("\nFitting Bayesian GAM with brms...\n")
cat("This may take several minutes...\n\n")
# Fit Bayesian GAM with brms
global_model <- brm(
global_formula,
family = negbinomial(),
data = model_data,
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
backend = "rstan",  # Use rstan as fallback if cmdstanr not available
control = list(adapt_delta = 0.95, max_treedepth = 12),
silent = 2,  # Suppress most output for cleaner logs
refresh = 0  # Suppress sampling progress
)
cat("Checking available variables in the prepared dataset...\n")
cat("Column names:\n")
print(names(data_30m))
cat("\nLooking for key variables:\n")
# Check for response variable
response_vars <- names(data_30m)[grepl("butterfl", names(data_30m), ignore.case = TRUE)]
cat("Response variables (containing 'butterfl'):", paste(response_vars, collapse = ", "), "\n")
# Check for lag variable
lag_vars <- names(data_30m)[grepl("minus|lag|t_", names(data_30m), ignore.case = TRUE)]
cat("Lag variables (containing 'minus', 'lag', or 't_'):", paste(lag_vars, collapse = ", "), "\n")
# Check for wind variables
wind_vars <- names(data_30m)[grepl("wind", names(data_30m), ignore.case = TRUE)]
cat("Wind variables:", paste(wind_vars, collapse = ", "), "\n")
# Check for temperature variables
temp_vars <- names(data_30m)[grepl("temp", names(data_30m), ignore.case = TRUE)]
cat("Temperature variables:", paste(temp_vars, collapse = ", "), "\n")
# Check for sunlight variables
sun_vars <- names(data_30m)[grepl("sun|light|proportion", names(data_30m), ignore.case = TRUE)]
cat("Sunlight variables:", paste(sun_vars, collapse = ", "), "\n")
# Check for time/date variables
time_vars <- names(data_30m)[grepl("time|date", names(data_30m), ignore.case = TRUE)]
cat("Time variables:", paste(time_vars, collapse = ", "), "\n")
